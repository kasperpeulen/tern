{
  "PositionOptions": {
    "enableHighAccuracy": "bool",
    "timeout": "number",
    "maximumAge": "number"
  },
  "ObjectURLOptions": {
    "oneTimeOnly": "bool"
  },
  "StoreExceptionsInformation": {
    "siteName": "string",
    "explanationString": "string",
    "detailURI": "string"
  },
  "StoreSiteSpecificExceptionsInformation": {
    "arrayOfDomainStrings": "[string]"
  },
  "ConfirmSiteSpecificExceptionsInformation": {
    "arrayOfDomainStrings": "[string]"
  },
  "AlgorithmParameters": {},
  "MutationObserverInit": {
    "childList": "bool",
    "attributes": "bool",
    "characterData": "bool",
    "subtree": "bool",
    "attributeOldValue": "bool",
    "characterDataOldValue": "bool",
    "attributeFilter": "[string]"
  },
  "PointerEventInit": {
    "pointerId": "number",
    "width": "number",
    "height": "number",
    "pressure": "number",
    "tiltX": "number",
    "tiltY": "number",
    "pointerType": "string",
    "isPrimary": "bool"
  },
  "ExceptionInformation": {
    "domain": "string"
  },
  "DeviceAccelerationDict": {
    "x": "number",
    "y": "number",
    "z": "number"
  },
  "MsZoomToOptions": {
    "contentX": "number",
    "contentY": "number",
    "viewportX": "string",
    "viewportY": "string",
    "scaleFactor": "number",
    "animate": "string"
  },
  "DeviceRotationRateDict": {
    "alpha": "number",
    "beta": "number",
    "gamma": "number"
  },
  "Algorithm": {
    "name": "string",
    "params": "AlgorithmParameters"
  },
  "MouseEventInit": {
    "bubbles": "bool",
    "cancelable": "bool",
    "view": "Window",
    "detail": "number",
    "screenX": "number",
    "screenY": "number",
    "clientX": "number",
    "clientY": "number",
    "ctrlKey": "bool",
    "shiftKey": "bool",
    "altKey": "bool",
    "metaKey": "bool",
    "button": "number",
    "buttons": "number",
    "relatedTarget": "EventTarget"
  },
  "WebGLContextAttributes": {
    "alpha": "bool",
    "depth": "bool",
    "stencil": "bool",
    "antialias": "bool",
    "premultipliedAlpha": "bool",
    "preserveDrawingBuffer": "bool"
  },
  "NodeListOf": {
    "length": "number",
    "item": "fn(index: number) -> TNode"
  },
  "HTMLElement": {
    "hidden": "?",
    "readyState": "?",
    "onmouseleave": "fn(ev: MouseEvent)",
    "onbeforecut": "fn(ev: DragEvent)",
    "onkeydown": "fn(ev: KeyboardEvent)",
    "onmove": "fn(ev: MSEventObj)",
    "onkeyup": "fn(ev: KeyboardEvent)",
    "onreset": "fn(ev: Event)",
    "onhelp": "fn(ev: Event)",
    "ondragleave": "fn(ev: DragEvent)",
    "className": "string",
    "onfocusin": "fn(ev: FocusEvent)",
    "onseeked": "fn(ev: Event)",
    "recordNumber": "?",
    "title": "string",
    "parentTextEdit": "Element",
    "outerHTML": "string",
    "ondurationchange": "fn(ev: Event)",
    "offsetHeight": "number",
    "all": "HTMLCollection",
    "onblur": "fn(ev: FocusEvent)",
    "dir": "string",
    "onemptied": "fn(ev: Event)",
    "onseeking": "fn(ev: Event)",
    "oncanplay": "fn(ev: Event)",
    "ondeactivate": "fn(ev: UIEvent)",
    "ondatasetchanged": "fn(ev: MSEventObj)",
    "onrowsdelete": "fn(ev: MSEventObj)",
    "sourceIndex": "number",
    "onloadstart": "fn(ev: Event)",
    "onlosecapture": "fn(ev: MSEventObj)",
    "ondragenter": "fn(ev: DragEvent)",
    "oncontrolselect": "fn(ev: MSEventObj)",
    "onsubmit": "fn(ev: Event)",
    "behaviorUrns": "MSBehaviorUrnsCollection",
    "scopeName": "string",
    "onchange": "fn(ev: Event)",
    "id": "string",
    "onlayoutcomplete": "fn(ev: MSEventObj)",
    "uniqueID": "string",
    "onbeforeactivate": "fn(ev: UIEvent)",
    "oncanplaythrough": "fn(ev: Event)",
    "onbeforeupdate": "fn(ev: MSEventObj)",
    "onfilterchange": "fn(ev: MSEventObj)",
    "offsetParent": "Element",
    "ondatasetcomplete": "fn(ev: MSEventObj)",
    "onsuspend": "fn(ev: Event)",
    "onmouseenter": "fn(ev: MouseEvent)",
    "innerText": "string",
    "onerrorupdate": "fn(ev: MSEventObj)",
    "onmouseout": "fn(ev: MouseEvent)",
    "parentElement": "HTMLElement",
    "onmousewheel": "fn(ev: MouseWheelEvent)",
    "onvolumechange": "fn(ev: Event)",
    "oncellchange": "fn(ev: MSEventObj)",
    "onrowexit": "fn(ev: MSEventObj)",
    "onrowsinserted": "fn(ev: MSEventObj)",
    "onpropertychange": "fn(ev: MSEventObj)",
    "filters": "?",
    "children": "HTMLCollection",
    "ondragend": "fn(ev: DragEvent)",
    "onbeforepaste": "fn(ev: DragEvent)",
    "ondragover": "fn(ev: DragEvent)",
    "offsetTop": "number",
    "onmouseup": "fn(ev: MouseEvent)",
    "ondragstart": "fn(ev: DragEvent)",
    "onbeforecopy": "fn(ev: DragEvent)",
    "ondrag": "fn(ev: DragEvent)",
    "innerHTML": "string",
    "onmouseover": "fn(ev: MouseEvent)",
    "lang": "string",
    "uniqueNumber": "number",
    "onpause": "fn(ev: Event)",
    "tagUrn": "string",
    "onmousedown": "fn(ev: MouseEvent)",
    "onclick": "fn(ev: MouseEvent)",
    "onwaiting": "fn(ev: Event)",
    "onresizestart": "fn(ev: MSEventObj)",
    "offsetLeft": "number",
    "isTextEdit": "bool",
    "isDisabled": "bool",
    "onpaste": "fn(ev: DragEvent)",
    "canHaveHTML": "bool",
    "onmoveend": "fn(ev: MSEventObj)",
    "language": "string",
    "onstalled": "fn(ev: Event)",
    "onmousemove": "fn(ev: MouseEvent)",
    "style": "MSStyleCSSProperties",
    "isContentEditable": "bool",
    "onbeforeeditfocus": "fn(ev: MSEventObj)",
    "onratechange": "fn(ev: Event)",
    "contentEditable": "string",
    "tabIndex": "number",
    "document": "Document",
    "onprogress": "fn(ev: ProgressEvent)",
    "ondblclick": "fn(ev: MouseEvent)",
    "oncontextmenu": "fn(ev: MouseEvent)",
    "onloadedmetadata": "fn(ev: Event)",
    "onafterupdate": "fn(ev: MSEventObj)",
    "onerror": "fn(ev: ErrorEvent)",
    "onplay": "fn(ev: Event)",
    "onresizeend": "fn(ev: MSEventObj)",
    "onplaying": "fn(ev: Event)",
    "isMultiLine": "bool",
    "onfocusout": "fn(ev: FocusEvent)",
    "onabort": "fn(ev: UIEvent)",
    "ondataavailable": "fn(ev: MSEventObj)",
    "hideFocus": "bool",
    "onreadystatechange": "fn(ev: Event)",
    "onkeypress": "fn(ev: KeyboardEvent)",
    "onloadeddata": "fn(ev: Event)",
    "onbeforedeactivate": "fn(ev: UIEvent)",
    "outerText": "string",
    "disabled": "bool",
    "onactivate": "fn(ev: UIEvent)",
    "accessKey": "string",
    "onmovestart": "fn(ev: MSEventObj)",
    "onselectstart": "fn(ev: Event)",
    "onfocus": "fn(ev: FocusEvent)",
    "ontimeupdate": "fn(ev: Event)",
    "onresize": "fn(ev: UIEvent)",
    "oncut": "fn(ev: DragEvent)",
    "onselect": "fn(ev: UIEvent)",
    "ondrop": "fn(ev: DragEvent)",
    "offsetWidth": "number",
    "oncopy": "fn(ev: DragEvent)",
    "onended": "fn(ev: Event)",
    "onscroll": "fn(ev: UIEvent)",
    "onrowenter": "fn(ev: MSEventObj)",
    "onload": "fn(ev: Event)",
    "canHaveChildren": "bool",
    "oninput": "fn(ev: Event)",
    "onmscontentzoom": "fn(ev: MSEventObj)",
    "oncuechange": "fn(ev: Event)",
    "spellcheck": "bool",
    "classList": "DOMTokenList",
    "onmsmanipulationstatechanged": "fn(ev: ?)",
    "draggable": "bool",
    "dataset": "DOMStringMap",
    "dragDrop": "fn() -> bool",
    "scrollIntoView": "fn(top?: bool)",
    "addFilter": "fn(filter: ?)",
    "setCapture": "fn(containerCapture?: bool)",
    "focus": "fn()",
    "getAdjacentText": "fn(where: string) -> string",
    "insertAdjacentText": "fn(where: string, text: string)",
    "getElementsByClassName": "fn(classNames: string) -> NodeList",
    "setActive": "fn()",
    "removeFilter": "fn(filter: ?)",
    "blur": "fn()",
    "clearAttributes": "fn()",
    "releaseCapture": "fn()",
    "createControlRange": "fn() -> ControlRangeCollection",
    "removeBehavior": "fn(cookie: number) -> bool",
    "contains": "fn(child: HTMLElement) -> bool",
    "click": "fn()",
    "insertAdjacentElement": "fn(position: string, insertedElement: Element) -> Element",
    "mergeAttributes": "fn(source: HTMLElement, preserveIdentity?: bool)",
    "replaceAdjacentText": "fn(where: string, newText: string) -> string",
    "applyElement": "fn(apply: Element, where?: string) -> Element",
    "addBehavior": "fn(bstrUrl: string, factory?: ?) -> number",
    "insertAdjacentHTML": "fn(where: string, html: string)",
    "msGetInputContext": "fn() -> MSInputMethodContext",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "HTMLElement"
  },
  "Document": {
    "documentElement": "HTMLElement",
    "compatible": "MSCompatibleInfoCollection",
    "onkeydown": "fn(ev: KeyboardEvent)",
    "onkeyup": "fn(ev: KeyboardEvent)",
    "implementation": "DOMImplementation",
    "onreset": "fn(ev: Event)",
    "scripts": "HTMLCollection",
    "onhelp": "fn(ev: Event)",
    "ondragleave": "fn(ev: DragEvent)",
    "charset": "string",
    "onfocusin": "fn(ev: FocusEvent)",
    "vlinkColor": "string",
    "onseeked": "fn(ev: Event)",
    "security": "string",
    "title": "string",
    "namespaces": "MSNamespaceInfoCollection",
    "defaultCharset": "string",
    "embeds": "HTMLCollection",
    "styleSheets": "StyleSheetList",
    "frames": "Window",
    "ondurationchange": "fn(ev: Event)",
    "all": "HTMLCollection",
    "forms": "HTMLCollection",
    "onblur": "fn(ev: FocusEvent)",
    "dir": "string",
    "onemptied": "fn(ev: Event)",
    "designMode": "string",
    "onseeking": "fn(ev: Event)",
    "ondeactivate": "fn(ev: UIEvent)",
    "oncanplay": "fn(ev: Event)",
    "ondatasetchanged": "fn(ev: MSEventObj)",
    "onrowsdelete": "fn(ev: MSEventObj)",
    "Script": "MSScriptHost",
    "onloadstart": "fn(ev: Event)",
    "URLUnencoded": "string",
    "defaultView": "Window",
    "oncontrolselect": "fn(ev: MSEventObj)",
    "ondragenter": "fn(ev: DragEvent)",
    "onsubmit": "fn(ev: Event)",
    "inputEncoding": "string",
    "activeElement": "Element",
    "onchange": "fn(ev: Event)",
    "links": "HTMLCollection",
    "uniqueID": "string",
    "URL": "string",
    "onbeforeactivate": "fn(ev: UIEvent)",
    "head": "HTMLHeadElement",
    "cookie": "string",
    "xmlEncoding": "string",
    "oncanplaythrough": "fn(ev: Event)",
    "documentMode": "number",
    "characterSet": "string",
    "anchors": "HTMLCollection",
    "onbeforeupdate": "fn(ev: MSEventObj)",
    "ondatasetcomplete": "fn(ev: MSEventObj)",
    "plugins": "HTMLCollection",
    "onsuspend": "fn(ev: Event)",
    "rootElement": "SVGSVGElement",
    "readyState": "string",
    "referrer": "string",
    "alinkColor": "string",
    "onerrorupdate": "fn(ev: MSEventObj)",
    "parentWindow": "Window",
    "onmouseout": "fn(ev: MouseEvent)",
    "onmsthumbnailclick": "fn(ev: MSSiteModeEvent)",
    "onmousewheel": "fn(ev: MouseWheelEvent)",
    "onvolumechange": "fn(ev: Event)",
    "oncellchange": "fn(ev: MSEventObj)",
    "onrowexit": "fn(ev: MSEventObj)",
    "onrowsinserted": "fn(ev: MSEventObj)",
    "xmlVersion": "string",
    "msCapsLockWarningOff": "bool",
    "onpropertychange": "fn(ev: MSEventObj)",
    "ondragend": "fn(ev: DragEvent)",
    "doctype": "DocumentType",
    "ondragover": "fn(ev: DragEvent)",
    "bgColor": "string",
    "ondragstart": "fn(ev: DragEvent)",
    "onmouseup": "fn(ev: MouseEvent)",
    "ondrag": "fn(ev: DragEvent)",
    "onmouseover": "fn(ev: MouseEvent)",
    "linkColor": "string",
    "onpause": "fn(ev: Event)",
    "onmousedown": "fn(ev: MouseEvent)",
    "onclick": "fn(ev: MouseEvent)",
    "onwaiting": "fn(ev: Event)",
    "onstop": "fn(ev: Event)",
    "onmssitemodejumplistitemremoved": "fn(ev: MSSiteModeEvent)",
    "applets": "HTMLCollection",
    "body": "HTMLElement",
    "domain": "string",
    "xmlStandalone": "bool",
    "selection": "MSSelection",
    "onstalled": "fn(ev: Event)",
    "onmousemove": "fn(ev: MouseEvent)",
    "onbeforeeditfocus": "fn(ev: MSEventObj)",
    "onratechange": "fn(ev: Event)",
    "onprogress": "fn(ev: ProgressEvent)",
    "ondblclick": "fn(ev: MouseEvent)",
    "oncontextmenu": "fn(ev: MouseEvent)",
    "onloadedmetadata": "fn(ev: Event)",
    "media": "string",
    "onerror": "fn(ev: ErrorEvent)",
    "onplay": "fn(ev: Event)",
    "onafterupdate": "fn(ev: MSEventObj)",
    "onplaying": "fn(ev: Event)",
    "images": "HTMLCollection",
    "location": "Location",
    "onabort": "fn(ev: UIEvent)",
    "onfocusout": "fn(ev: FocusEvent)",
    "onselectionchange": "fn(ev: Event)",
    "onstoragecommit": "fn(ev: StorageEvent)",
    "ondataavailable": "fn(ev: MSEventObj)",
    "onreadystatechange": "fn(ev: Event)",
    "lastModified": "string",
    "onkeypress": "fn(ev: KeyboardEvent)",
    "onloadeddata": "fn(ev: Event)",
    "onbeforedeactivate": "fn(ev: UIEvent)",
    "onactivate": "fn(ev: UIEvent)",
    "onselectstart": "fn(ev: Event)",
    "onfocus": "fn(ev: FocusEvent)",
    "fgColor": "string",
    "ontimeupdate": "fn(ev: Event)",
    "onselect": "fn(ev: UIEvent)",
    "ondrop": "fn(ev: DragEvent)",
    "onended": "fn(ev: Event)",
    "compatMode": "string",
    "onscroll": "fn(ev: UIEvent)",
    "onrowenter": "fn(ev: MSEventObj)",
    "onload": "fn(ev: Event)",
    "oninput": "fn(ev: Event)",
    "onmspointerdown": "fn(ev: ?)",
    "msHidden": "bool",
    "msVisibilityState": "string",
    "onmsgesturedoubletap": "fn(ev: ?)",
    "visibilityState": "string",
    "onmsmanipulationstatechanged": "fn(ev: ?)",
    "onmspointerhover": "fn(ev: ?)",
    "onmscontentzoom": "fn(ev: MSEventObj)",
    "onmspointermove": "fn(ev: ?)",
    "onmsgesturehold": "fn(ev: ?)",
    "onmsgesturechange": "fn(ev: ?)",
    "onmsgesturestart": "fn(ev: ?)",
    "onmspointercancel": "fn(ev: ?)",
    "onmsgestureend": "fn(ev: ?)",
    "onmsgesturetap": "fn(ev: ?)",
    "onmspointerout": "fn(ev: ?)",
    "onmsinertiastart": "fn(ev: ?)",
    "msCSSOMElementFloatMetrics": "bool",
    "onmspointerover": "fn(ev: ?)",
    "hidden": "bool",
    "onmspointerup": "fn(ev: ?)",
    "msFullscreenEnabled": "bool",
    "onmsfullscreenerror": "fn(ev: ?)",
    "onmspointerenter": "fn(ev: ?)",
    "msFullscreenElement": "Element",
    "onmsfullscreenchange": "fn(ev: ?)",
    "onmspointerleave": "fn(ev: ?)",
    "getElementById": "fn(elementId: string) -> HTMLElement",
    "queryCommandValue": "fn(commandId: string) -> string",
    "adoptNode": "fn(source: Node) -> Node",
    "queryCommandIndeterm": "fn(commandId: string) -> bool",
    "getElementsByTagNameNS": "fn(namespaceURI: string, localName: string) -> NodeList",
    "createProcessingInstruction": "fn(target: string, data: string) -> ProcessingInstruction",
    "execCommand": "fn(commandId: string, showUI?: bool, value?: ?) -> bool",
    "elementFromPoint": "fn(x: number, y: number) -> Element",
    "createCDATASection": "fn(data: string) -> CDATASection",
    "queryCommandText": "fn(commandId: string) -> string",
    "write": "fn(content: [string])",
    "updateSettings": "fn()",
    "createElement": "fn(tagName: string) -> HTMLAnchorElement",
    "releaseCapture": "fn()",
    "writeln": "fn(content: [string])",
    "createElementNS": "fn(namespaceURI: string, qualifiedName: string) -> Element",
    "open": "fn(url?: string, name?: string, features?: string, replace?: bool) -> ?",
    "queryCommandSupported": "fn(commandId: string) -> bool",
    "createTreeWalker": "fn(root: Node, whatToShow: number, filter: NodeFilter, entityReferenceExpansion: bool) -> TreeWalker",
    "createAttributeNS": "fn(namespaceURI: string, qualifiedName: string) -> Attr",
    "queryCommandEnabled": "fn(commandId: string) -> bool",
    "focus": "fn()",
    "close": "fn()",
    "getElementsByClassName": "fn(classNames: string) -> NodeList",
    "importNode": "fn(importedNode: Node, deep: bool) -> Node",
    "createRange": "fn() -> Range",
    "fireEvent": "fn(eventName: string, eventObj?: ?) -> bool",
    "createComment": "fn(data: string) -> Comment",
    "getElementsByTagName": "fn(name: string) -> ?",
    "createDocumentFragment": "fn() -> DocumentFragment",
    "createStyleSheet": "fn(href?: string, index?: number) -> CSSStyleSheet",
    "getElementsByName": "fn(elementName: string) -> NodeList",
    "queryCommandState": "fn(commandId: string) -> bool",
    "hasFocus": "fn() -> bool",
    "execCommandShowHelp": "fn(commandId: string) -> bool",
    "createAttribute": "fn(name: string) -> Attr",
    "createTextNode": "fn(data: string) -> Text",
    "createNodeIterator": "fn(root: Node, whatToShow: number, filter: NodeFilter, entityReferenceExpansion: bool) -> NodeIterator",
    "createEventObject": "fn(eventObj?: ?) -> MSEventObj",
    "getSelection": "fn() -> Selection",
    "msElementsFromPoint": "fn(x: number, y: number) -> NodeList",
    "msElementsFromRect": "fn(left: number, top: number, width: number, height: number) -> NodeList",
    "clear": "fn()",
    "msExitFullscreen": "fn()",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "Document"
  },
  "Console": {
    "info": "fn(message?: ?, optionalParams: [?])",
    "warn": "fn(message?: ?, optionalParams: [?])",
    "error": "fn(message?: ?, optionalParams: [?])",
    "log": "fn(message?: ?, optionalParams: [?])",
    "profile": "fn(reportName?: string)",
    "assert": "fn(test?: bool, message?: string, optionalParams: [?])",
    "msIsIndependentlyComposed": "fn(element: Element) -> bool",
    "clear": "fn()",
    "dir": "fn(value?: ?, optionalParams: [?])",
    "profileEnd": "fn()",
    "count": "fn(countTitle?: string)",
    "groupEnd": "fn()",
    "time": "fn(timerName?: string)",
    "timeEnd": "fn(timerName?: string)",
    "trace": "fn()",
    "group": "fn(groupTitle?: string)",
    "dirxml": "fn(value: ?)",
    "debug": "fn(message?: string, optionalParams: [?])",
    "groupCollapsed": "fn(groupTitle?: string)",
    "select": "fn(element: Element)",
    "prototype": "Console"
  },
  "MSEventObj": {
    "nextPage": "string",
    "keyCode": "number",
    "toElement": "Element",
    "returnValue": "?",
    "dataFld": "string",
    "y": "number",
    "dataTransfer": "DataTransfer",
    "propertyName": "string",
    "url": "string",
    "offsetX": "number",
    "recordset": "?",
    "screenX": "number",
    "buttonID": "number",
    "wheelDelta": "number",
    "reason": "number",
    "origin": "string",
    "data": "string",
    "srcFilter": "?",
    "boundElements": "HTMLCollection",
    "cancelBubble": "bool",
    "altLeft": "bool",
    "behaviorCookie": "number",
    "bookmarks": "BookmarkCollection",
    "type": "string",
    "repeat": "bool",
    "srcElement": "Element",
    "source": "Window",
    "fromElement": "Element",
    "offsetY": "number",
    "x": "number",
    "behaviorPart": "number",
    "qualifier": "string",
    "altKey": "bool",
    "ctrlKey": "bool",
    "clientY": "number",
    "shiftKey": "bool",
    "shiftLeft": "bool",
    "contentOverflow": "bool",
    "screenY": "number",
    "ctrlLeft": "bool",
    "button": "number",
    "srcUrn": "string",
    "clientX": "number",
    "actionURL": "string",
    "getAttribute": "fn(strAttributeName: string, lFlags?: number) -> ?",
    "setAttribute": "fn(strAttributeName: string, AttributeValue: ?, lFlags?: number)",
    "removeAttribute": "fn(strAttributeName: string, lFlags?: number) -> bool",
    "prototype": "MSEventObj"
  },
  "HTMLCanvasElement": {
    "width": "number",
    "height": "number",
    "getContext": "fn(contextId: string) -> CanvasRenderingContext2D",
    "toDataURL": "fn(type?: string, args: [?]) -> string",
    "msToBlob": "fn() -> Blob",
    "prototype": "HTMLCanvasElement"
  },
  "Window": {
    "ondragend": "fn(ev: DragEvent)",
    "onkeydown": "fn(ev: KeyboardEvent)",
    "ondragover": "fn(ev: DragEvent)",
    "onkeyup": "fn(ev: KeyboardEvent)",
    "onreset": "fn(ev: Event)",
    "onmouseup": "fn(ev: MouseEvent)",
    "ondragstart": "fn(ev: DragEvent)",
    "ondrag": "fn(ev: DragEvent)",
    "screenX": "number",
    "onmouseover": "fn(ev: MouseEvent)",
    "ondragleave": "fn(ev: DragEvent)",
    "history": "History",
    "pageXOffset": "number",
    "name": "string",
    "onafterprint": "fn(ev: Event)",
    "onpause": "fn(ev: Event)",
    "onbeforeprint": "fn(ev: Event)",
    "top": "Window",
    "onmousedown": "fn(ev: MouseEvent)",
    "onseeked": "fn(ev: Event)",
    "opener": "Window",
    "onclick": "fn(ev: MouseEvent)",
    "innerHeight": "number",
    "onwaiting": "fn(ev: Event)",
    "ononline": "fn(ev: Event)",
    "ondurationchange": "fn(ev: Event)",
    "frames": "Window",
    "onblur": "fn(ev: FocusEvent)",
    "onemptied": "fn(ev: Event)",
    "onseeking": "fn(ev: Event)",
    "oncanplay": "fn(ev: Event)",
    "outerWidth": "number",
    "onstalled": "fn(ev: Event)",
    "onmousemove": "fn(ev: MouseEvent)",
    "innerWidth": "number",
    "onoffline": "fn(ev: Event)",
    "length": "number",
    "screen": "Screen",
    "onbeforeunload": "fn(ev: BeforeUnloadEvent)",
    "onratechange": "fn(ev: Event)",
    "onstorage": "fn(ev: StorageEvent)",
    "onloadstart": "fn(ev: Event)",
    "ondragenter": "fn(ev: DragEvent)",
    "onsubmit": "fn(ev: Event)",
    "self": "Window",
    "document": "Document",
    "onprogress": "fn(ev: ProgressEvent)",
    "ondblclick": "fn(ev: MouseEvent)",
    "pageYOffset": "number",
    "oncontextmenu": "fn(ev: MouseEvent)",
    "onchange": "fn(ev: Event)",
    "onloadedmetadata": "fn(ev: Event)",
    "onplay": "fn(ev: Event)",
    "onerror": "ErrorEventHandler",
    "onplaying": "fn(ev: Event)",
    "parent": "Window",
    "location": "Location",
    "oncanplaythrough": "fn(ev: Event)",
    "onabort": "fn(ev: UIEvent)",
    "onreadystatechange": "fn(ev: Event)",
    "outerHeight": "number",
    "onkeypress": "fn(ev: KeyboardEvent)",
    "frameElement": "Element",
    "onloadeddata": "fn(ev: Event)",
    "onsuspend": "fn(ev: Event)",
    "window": "Window",
    "onfocus": "fn(ev: FocusEvent)",
    "onmessage": "fn(ev: MessageEvent)",
    "ontimeupdate": "fn(ev: Event)",
    "onresize": "fn(ev: UIEvent)",
    "onselect": "fn(ev: UIEvent)",
    "navigator": "Navigator",
    "styleMedia": "StyleMedia",
    "ondrop": "fn(ev: DragEvent)",
    "onmouseout": "fn(ev: MouseEvent)",
    "onended": "fn(ev: Event)",
    "onhashchange": "fn(ev: Event)",
    "onunload": "fn(ev: Event)",
    "onscroll": "fn(ev: UIEvent)",
    "screenY": "number",
    "onmousewheel": "fn(ev: MouseWheelEvent)",
    "onload": "fn(ev: Event)",
    "onvolumechange": "fn(ev: Event)",
    "oninput": "fn(ev: Event)",
    "performance": "Performance",
    "onmspointerdown": "fn(ev: ?)",
    "animationStartTime": "number",
    "onmsgesturedoubletap": "fn(ev: ?)",
    "onmspointerhover": "fn(ev: ?)",
    "onmsgesturehold": "fn(ev: ?)",
    "onmspointermove": "fn(ev: ?)",
    "onmsgesturechange": "fn(ev: ?)",
    "onmsgesturestart": "fn(ev: ?)",
    "onmspointercancel": "fn(ev: ?)",
    "onmsgestureend": "fn(ev: ?)",
    "onmsgesturetap": "fn(ev: ?)",
    "onmspointerout": "fn(ev: ?)",
    "msAnimationStartTime": "number",
    "applicationCache": "ApplicationCache",
    "onmsinertiastart": "fn(ev: ?)",
    "onmspointerover": "fn(ev: ?)",
    "onpopstate": "fn(ev: PopStateEvent)",
    "onmspointerup": "fn(ev: ?)",
    "onpageshow": "fn(ev: PageTransitionEvent)",
    "ondevicemotion": "fn(ev: DeviceMotionEvent)",
    "devicePixelRatio": "number",
    "msCrypto": "Crypto",
    "ondeviceorientation": "fn(ev: DeviceOrientationEvent)",
    "doNotTrack": "string",
    "onmspointerenter": "fn(ev: ?)",
    "onpagehide": "fn(ev: PageTransitionEvent)",
    "onmspointerleave": "fn(ev: ?)",
    "alert": "fn(message?: ?)",
    "scroll": "fn(x?: number, y?: number)",
    "focus": "fn()",
    "scrollTo": "fn(x?: number, y?: number)",
    "print": "fn()",
    "prompt": "fn(message?: string, _default?: string) -> string",
    "open": "fn(url?: string, target?: string, features?: string, replace?: bool) -> Window",
    "scrollBy": "fn(x?: number, y?: number)",
    "confirm": "fn(message?: string) -> bool",
    "close": "fn()",
    "postMessage": "fn(message: ?, targetOrigin: string, ports?: ?)",
    "showModalDialog": "fn(url?: string, argument?: ?, options?: ?) -> ?",
    "blur": "fn()",
    "getSelection": "fn() -> Selection",
    "getComputedStyle": "fn(elt: Element, pseudoElt?: string) -> CSSStyleDeclaration",
    "msCancelRequestAnimationFrame": "fn(handle: number)",
    "matchMedia": "fn(mediaQuery: string) -> MediaQueryList",
    "cancelAnimationFrame": "fn(handle: number)",
    "msIsStaticHTML": "fn(html: string) -> bool",
    "msMatchMedia": "fn(mediaQuery: string) -> MediaQueryList",
    "requestAnimationFrame": "fn(callback: FrameRequestCallback) -> number",
    "msRequestAnimationFrame": "fn(callback: FrameRequestCallback) -> number",
    "addEventListener": "fn(type: string, listener: fn(ev: MouseEvent), useCapture?: bool)",
    "prototype": "Window"
  },
  "HTMLCollection": {
    "length": "number",
    "item": "fn(nameOrIndex?: ?, optionalIndex?: ?) -> Element",
    "namedItem": "fn(name: string) -> Element",
    "prototype": "HTMLCollection"
  },
  "BlobPropertyBag": {
    "type": "string",
    "endings": "string"
  },
  "Blob": {
    "type": "string",
    "size": "number",
    "msDetachStream": "fn() -> ?",
    "slice": "fn(start?: number, end?: number, contentType?: string) -> Blob",
    "msClose": "fn()",
    "prototype": "Blob"
  },
  "NavigatorID": {
    "appVersion": "string",
    "appName": "string",
    "userAgent": "string",
    "platform": "string",
    "product": "string",
    "vendor": "string"
  },
  "HTMLTableElement": {
    "width": "string",
    "borderColorLight": "?",
    "cellSpacing": "string",
    "tFoot": "HTMLTableSectionElement",
    "frame": "string",
    "borderColor": "?",
    "rows": "HTMLCollection",
    "rules": "string",
    "cols": "number",
    "summary": "string",
    "caption": "HTMLTableCaptionElement",
    "tBodies": "HTMLCollection",
    "tHead": "HTMLTableSectionElement",
    "align": "string",
    "cells": "HTMLCollection",
    "height": "?",
    "cellPadding": "string",
    "border": "string",
    "borderColorDark": "?",
    "deleteRow": "fn(index?: number)",
    "createTBody": "fn() -> HTMLElement",
    "deleteCaption": "fn()",
    "insertRow": "fn(index?: number) -> HTMLElement",
    "deleteTFoot": "fn()",
    "createTHead": "fn() -> HTMLElement",
    "deleteTHead": "fn()",
    "createCaption": "fn() -> HTMLElement",
    "moveRow": "fn(indexFrom?: number, indexTo?: number) -> ?",
    "createTFoot": "fn() -> HTMLElement",
    "prototype": "HTMLTableElement"
  },
  "TreeWalker": {
    "whatToShow": "number",
    "filter": "NodeFilter",
    "root": "Node",
    "currentNode": "Node",
    "expandEntityReferences": "bool",
    "previousSibling": "fn() -> Node",
    "lastChild": "fn() -> Node",
    "nextSibling": "fn() -> Node",
    "nextNode": "fn() -> Node",
    "parentNode": "fn() -> Node",
    "firstChild": "fn() -> Node",
    "previousNode": "fn() -> Node",
    "prototype": "TreeWalker"
  },
  "GetSVGDocument": {
    "getSVGDocument": "fn() -> Document"
  },
  "SVGPathSegCurvetoQuadraticRel": {
    "y": "number",
    "y1": "number",
    "x": "number",
    "x1": "number",
    "prototype": "SVGPathSegCurvetoQuadraticRel"
  },
  "Performance": {
    "navigation": "PerformanceNavigation",
    "timing": "PerformanceTiming",
    "getEntriesByType": "fn(entryType: string) -> ?",
    "toJSON": "fn() -> ?",
    "getMeasures": "fn(measureName?: string) -> ?",
    "clearMarks": "fn(markName?: string)",
    "getMarks": "fn(markName?: string) -> ?",
    "clearResourceTimings": "fn()",
    "mark": "fn(markName: string)",
    "measure": "fn(measureName: string, startMarkName?: string, endMarkName?: string)",
    "getEntriesByName": "fn(name: string, entryType?: string) -> ?",
    "getEntries": "fn() -> ?",
    "clearMeasures": "fn(measureName?: string)",
    "setResourceTimingBufferSize": "fn(maxSize: number)",
    "now": "fn() -> number",
    "prototype": "Performance"
  },
  "MSDataBindingTableExtensions": {
    "dataPageSize": "number",
    "nextPage": "fn()",
    "firstPage": "fn()",
    "refresh": "fn()",
    "previousPage": "fn()",
    "lastPage": "fn()"
  },
  "CompositionEvent": {
    "data": "string",
    "locale": "string",
    "initCompositionEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, dataArg: string, locale: string)",
    "prototype": "CompositionEvent"
  },
  "WindowTimers": {
    "clearTimeout": "fn(handle: number)",
    "setTimeout": "fn(handler: ?, timeout?: ?, args: [?]) -> number",
    "clearInterval": "fn(handle: number)",
    "setInterval": "fn(handler: ?, timeout?: ?, args: [?]) -> number"
  },
  "SVGMarkerElement": {
    "orientType": "SVGAnimatedEnumeration",
    "markerUnits": "SVGAnimatedEnumeration",
    "markerWidth": "SVGAnimatedLength",
    "markerHeight": "SVGAnimatedLength",
    "orientAngle": "SVGAnimatedAngle",
    "refY": "SVGAnimatedLength",
    "refX": "SVGAnimatedLength",
    "setOrientToAngle": "fn(angle: SVGAngle)",
    "setOrientToAuto": "fn()",
    "SVG_MARKER_ORIENT_UNKNOWN": "number",
    "SVG_MARKER_ORIENT_ANGLE": "number",
    "SVG_MARKERUNITS_UNKNOWN": "number",
    "SVG_MARKERUNITS_STROKEWIDTH": "number",
    "SVG_MARKER_ORIENT_AUTO": "number",
    "SVG_MARKERUNITS_USERSPACEONUSE": "number",
    "prototype": "SVGMarkerElement"
  },
  "CSSStyleDeclaration": {
    "backgroundAttachment": "string",
    "visibility": "string",
    "textAlignLast": "string",
    "borderRightStyle": "string",
    "counterIncrement": "string",
    "orphans": "string",
    "cssText": "string",
    "borderStyle": "string",
    "pointerEvents": "string",
    "borderTopColor": "string",
    "markerEnd": "string",
    "textIndent": "string",
    "listStyleImage": "string",
    "cursor": "string",
    "listStylePosition": "string",
    "wordWrap": "string",
    "borderTopStyle": "string",
    "alignmentBaseline": "string",
    "opacity": "string",
    "direction": "string",
    "strokeMiterlimit": "string",
    "maxWidth": "string",
    "color": "string",
    "clip": "string",
    "borderRightWidth": "string",
    "verticalAlign": "string",
    "overflow": "string",
    "mask": "string",
    "borderLeftStyle": "string",
    "emptyCells": "string",
    "stopOpacity": "string",
    "paddingRight": "string",
    "parentRule": "CSSRule",
    "background": "string",
    "boxSizing": "string",
    "textJustify": "string",
    "height": "string",
    "paddingTop": "string",
    "length": "number",
    "right": "string",
    "baselineShift": "string",
    "borderLeft": "string",
    "widows": "string",
    "lineHeight": "string",
    "left": "string",
    "textUnderlinePosition": "string",
    "glyphOrientationHorizontal": "string",
    "display": "string",
    "textAnchor": "string",
    "cssFloat": "string",
    "strokeDasharray": "string",
    "rubyAlign": "string",
    "fontSizeAdjust": "string",
    "borderLeftColor": "string",
    "backgroundImage": "string",
    "listStyleType": "string",
    "strokeWidth": "string",
    "textOverflow": "string",
    "fillRule": "string",
    "borderBottomColor": "string",
    "zIndex": "string",
    "position": "string",
    "listStyle": "string",
    "msTransformOrigin": "string",
    "dominantBaseline": "string",
    "overflowY": "string",
    "fill": "string",
    "captionSide": "string",
    "borderCollapse": "string",
    "boxShadow": "string",
    "quotes": "string",
    "tableLayout": "string",
    "unicodeBidi": "string",
    "borderBottomWidth": "string",
    "backgroundSize": "string",
    "textDecoration": "string",
    "strokeDashoffset": "string",
    "fontSize": "string",
    "border": "string",
    "pageBreakBefore": "string",
    "borderTopRightRadius": "string",
    "msTransform": "string",
    "borderBottomLeftRadius": "string",
    "textTransform": "string",
    "rubyPosition": "string",
    "strokeLinejoin": "string",
    "clipPath": "string",
    "borderRightColor": "string",
    "fontFamily": "string",
    "clear": "string",
    "content": "string",
    "backgroundClip": "string",
    "marginBottom": "string",
    "counterReset": "string",
    "outlineWidth": "string",
    "marginRight": "string",
    "paddingLeft": "string",
    "borderBottom": "string",
    "wordBreak": "string",
    "marginTop": "string",
    "top": "string",
    "fontWeight": "string",
    "borderRight": "string",
    "width": "string",
    "kerning": "string",
    "pageBreakAfter": "string",
    "borderBottomStyle": "string",
    "fontStretch": "string",
    "padding": "string",
    "strokeOpacity": "string",
    "markerStart": "string",
    "bottom": "string",
    "borderLeftWidth": "string",
    "clipRule": "string",
    "backgroundPosition": "string",
    "backgroundColor": "string",
    "pageBreakInside": "string",
    "backgroundOrigin": "string",
    "strokeLinecap": "string",
    "borderTopWidth": "string",
    "outlineStyle": "string",
    "borderTop": "string",
    "outlineColor": "string",
    "paddingBottom": "string",
    "marginLeft": "string",
    "font": "string",
    "outline": "string",
    "wordSpacing": "string",
    "maxHeight": "string",
    "fillOpacity": "string",
    "letterSpacing": "string",
    "borderSpacing": "string",
    "backgroundRepeat": "string",
    "borderRadius": "string",
    "borderWidth": "string",
    "borderBottomRightRadius": "string",
    "whiteSpace": "string",
    "fontStyle": "string",
    "minWidth": "string",
    "stopColor": "string",
    "borderTopLeftRadius": "string",
    "borderColor": "string",
    "marker": "string",
    "glyphOrientationVertical": "string",
    "markerMid": "string",
    "fontVariant": "string",
    "minHeight": "string",
    "stroke": "string",
    "rubyOverhang": "string",
    "overflowX": "string",
    "textAlign": "string",
    "margin": "string",
    "animationFillMode": "string",
    "floodColor": "string",
    "animationIterationCount": "string",
    "textShadow": "string",
    "backfaceVisibility": "string",
    "msAnimationIterationCount": "string",
    "animationDelay": "string",
    "animationTimingFunction": "string",
    "columnWidth": "?",
    "msScrollSnapX": "string",
    "columnRuleColor": "?",
    "columnRuleWidth": "?",
    "transitionDelay": "string",
    "transition": "string",
    "msFlowFrom": "string",
    "msScrollSnapType": "string",
    "msContentZoomSnapType": "string",
    "msGridColumns": "string",
    "msAnimationName": "string",
    "msGridRowAlign": "string",
    "msContentZoomChaining": "string",
    "msGridColumn": "?",
    "msHyphenateLimitZone": "?",
    "msScrollRails": "string",
    "msAnimationDelay": "string",
    "enableBackground": "string",
    "msWrapThrough": "string",
    "columnRuleStyle": "string",
    "msAnimation": "string",
    "msFlexFlow": "string",
    "msScrollSnapY": "string",
    "msHyphenateLimitLines": "?",
    "msTouchAction": "string",
    "msScrollLimit": "string",
    "animation": "string",
    "transform": "string",
    "filter": "string",
    "colorInterpolationFilters": "string",
    "transitionTimingFunction": "string",
    "msBackfaceVisibility": "string",
    "animationPlayState": "string",
    "transformOrigin": "string",
    "msScrollLimitYMin": "?",
    "msFontFeatureSettings": "string",
    "msContentZoomLimitMin": "?",
    "columnGap": "?",
    "transitionProperty": "string",
    "msAnimationDuration": "string",
    "msAnimationFillMode": "string",
    "msFlexDirection": "string",
    "msTransitionDuration": "string",
    "fontFeatureSettings": "string",
    "breakBefore": "string",
    "msFlexWrap": "string",
    "perspective": "string",
    "msFlowInto": "string",
    "msTransformStyle": "string",
    "msScrollTranslation": "string",
    "msTransitionProperty": "string",
    "msUserSelect": "string",
    "msOverflowStyle": "string",
    "msScrollSnapPointsY": "string",
    "animationDirection": "string",
    "animationDuration": "string",
    "msFlex": "string",
    "msTransitionTimingFunction": "string",
    "animationName": "string",
    "columnRule": "string",
    "msGridColumnSpan": "?",
    "msFlexNegative": "string",
    "columnFill": "string",
    "msGridRow": "?",
    "msFlexOrder": "string",
    "msFlexItemAlign": "string",
    "msFlexPositive": "string",
    "msContentZoomLimitMax": "?",
    "msScrollLimitYMax": "?",
    "msGridColumnAlign": "string",
    "perspectiveOrigin": "string",
    "lightingColor": "string",
    "columns": "string",
    "msScrollChaining": "string",
    "msHyphenateLimitChars": "string",
    "msTouchSelect": "string",
    "floodOpacity": "string",
    "msAnimationDirection": "string",
    "msAnimationPlayState": "string",
    "columnSpan": "string",
    "msContentZooming": "string",
    "msPerspective": "string",
    "msFlexPack": "string",
    "msScrollSnapPointsX": "string",
    "msContentZoomSnapPoints": "string",
    "msGridRowSpan": "?",
    "msContentZoomSnap": "string",
    "msScrollLimitXMin": "?",
    "breakInside": "string",
    "msHighContrastAdjust": "string",
    "msFlexLinePack": "string",
    "msGridRows": "string",
    "transitionDuration": "string",
    "msHyphens": "string",
    "breakAfter": "string",
    "msTransition": "string",
    "msPerspectiveOrigin": "string",
    "msContentZoomLimit": "string",
    "msScrollLimitXMax": "?",
    "msFlexAlign": "string",
    "msWrapMargin": "?",
    "columnCount": "?",
    "msAnimationTimingFunction": "string",
    "msTransitionDelay": "string",
    "transformStyle": "string",
    "msWrapFlow": "string",
    "msFlexPreferredSize": "string",
    "alignItems": "string",
    "borderImageSource": "string",
    "flexBasis": "string",
    "borderImageWidth": "string",
    "borderImageRepeat": "string",
    "order": "string",
    "flex": "string",
    "alignContent": "string",
    "msImeAlign": "string",
    "flexShrink": "string",
    "flexGrow": "string",
    "borderImageSlice": "string",
    "flexWrap": "string",
    "borderImageOutset": "string",
    "flexDirection": "string",
    "touchAction": "string",
    "flexFlow": "string",
    "borderImage": "string",
    "justifyContent": "string",
    "alignSelf": "string",
    "msTextCombineHorizontal": "string",
    "getPropertyPriority": "fn(propertyName: string) -> string",
    "getPropertyValue": "fn(propertyName: string) -> string",
    "removeProperty": "fn(propertyName: string) -> string",
    "item": "fn(index: number) -> string",
    "setProperty": "fn(propertyName: string, value: string, priority?: string)",
    "prototype": "CSSStyleDeclaration"
  },
  "SVGGElement": {
    "prototype": "SVGGElement"
  },
  "MSStyleCSSProperties": {
    "pixelWidth": "number",
    "posHeight": "number",
    "posLeft": "number",
    "pixelTop": "number",
    "pixelBottom": "number",
    "textDecorationNone": "bool",
    "pixelLeft": "number",
    "posTop": "number",
    "posBottom": "number",
    "textDecorationOverline": "bool",
    "posWidth": "number",
    "textDecorationLineThrough": "bool",
    "pixelHeight": "number",
    "textDecorationBlink": "bool",
    "posRight": "number",
    "pixelRight": "number",
    "textDecorationUnderline": "bool",
    "prototype": "MSStyleCSSProperties"
  },
  "Navigator": {
    "msMaxTouchPoints": "number",
    "msPointerEnabled": "bool",
    "msManipulationViewsEnabled": "bool",
    "pointerEnabled": "bool",
    "maxTouchPoints": "number",
    "msLaunchUri": "fn(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback)",
    "prototype": "Navigator"
  },
  "SVGPathSegCurvetoCubicSmoothAbs": {
    "y": "number",
    "x2": "number",
    "x": "number",
    "y2": "number",
    "prototype": "SVGPathSegCurvetoCubicSmoothAbs"
  },
  "SVGZoomEvent": {
    "zoomRectScreen": "SVGRect",
    "previousScale": "number",
    "newScale": "number",
    "previousTranslate": "SVGPoint",
    "newTranslate": "SVGPoint",
    "prototype": "SVGZoomEvent"
  },
  "NodeSelector": {
    "querySelectorAll": "fn(selectors: string) -> NodeList",
    "querySelector": "fn(selectors: string) -> Element"
  },
  "HTMLTableDataCellElement": {
    "prototype": "HTMLTableDataCellElement"
  },
  "HTMLBaseElement": {
    "target": "string",
    "href": "string",
    "prototype": "HTMLBaseElement"
  },
  "ClientRect": {
    "left": "number",
    "width": "number",
    "right": "number",
    "top": "number",
    "bottom": "number",
    "height": "number",
    "prototype": "ClientRect"
  },
  "PositionErrorCallback": {},
  "DOMImplementation": {
    "createDocumentType": "fn(qualifiedName: string, publicId: string, systemId: string) -> DocumentType",
    "createDocument": "fn(namespaceURI: string, qualifiedName: string, doctype: DocumentType) -> Document",
    "hasFeature": "fn(feature: string, version?: string) -> bool",
    "createHTMLDocument": "fn(title: string) -> Document",
    "prototype": "DOMImplementation"
  },
  "SVGUnitTypes": {
    "SVG_UNIT_TYPE_UNKNOWN": "number",
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": "number",
    "SVG_UNIT_TYPE_USERSPACEONUSE": "number",
    "!type": "SVGUnitTypes"
  },
  "Element": {
    "scrollTop": "number",
    "clientLeft": "number",
    "scrollLeft": "number",
    "tagName": "string",
    "clientWidth": "number",
    "scrollWidth": "number",
    "clientHeight": "number",
    "clientTop": "number",
    "scrollHeight": "number",
    "msRegionOverflow": "string",
    "onmspointerdown": "fn(ev: ?)",
    "onmsgotpointercapture": "fn(ev: ?)",
    "onmsgesturedoubletap": "fn(ev: ?)",
    "onmspointerhover": "fn(ev: ?)",
    "onmsgesturehold": "fn(ev: ?)",
    "onmspointermove": "fn(ev: ?)",
    "onmsgesturechange": "fn(ev: ?)",
    "onmsgesturestart": "fn(ev: ?)",
    "onmspointercancel": "fn(ev: ?)",
    "onmsgestureend": "fn(ev: ?)",
    "onmsgesturetap": "fn(ev: ?)",
    "onmspointerout": "fn(ev: ?)",
    "onmsinertiastart": "fn(ev: ?)",
    "onmslostpointercapture": "fn(ev: ?)",
    "onmspointerover": "fn(ev: ?)",
    "msContentZoomFactor": "number",
    "onmspointerup": "fn(ev: ?)",
    "onlostpointercapture": "fn(ev: PointerEvent)",
    "onmspointerenter": "fn(ev: ?)",
    "ongotpointercapture": "fn(ev: PointerEvent)",
    "onmspointerleave": "fn(ev: ?)",
    "getAttribute": "fn(name?: string) -> string",
    "getElementsByTagNameNS": "fn(namespaceURI: string, localName: string) -> NodeList",
    "hasAttributeNS": "fn(namespaceURI: string, localName: string) -> bool",
    "getBoundingClientRect": "fn() -> ClientRect",
    "getAttributeNS": "fn(namespaceURI: string, localName: string) -> string",
    "getAttributeNodeNS": "fn(namespaceURI: string, localName: string) -> Attr",
    "setAttributeNodeNS": "fn(newAttr: Attr) -> Attr",
    "msMatchesSelector": "fn(selectors: string) -> bool",
    "hasAttribute": "fn(name: string) -> bool",
    "removeAttribute": "fn(name?: string)",
    "setAttributeNS": "fn(namespaceURI: string, qualifiedName: string, value: string)",
    "getAttributeNode": "fn(name: string) -> Attr",
    "fireEvent": "fn(eventName: string, eventObj?: ?) -> bool",
    "getElementsByTagName": "fn(name: string) -> ?",
    "getClientRects": "fn() -> ClientRectList",
    "setAttributeNode": "fn(newAttr: Attr) -> Attr",
    "removeAttributeNode": "fn(oldAttr: Attr) -> Attr",
    "setAttribute": "fn(name?: string, value?: string)",
    "removeAttributeNS": "fn(namespaceURI: string, localName: string)",
    "msGetRegionContent": "fn() -> MSRangeCollection",
    "msReleasePointerCapture": "fn(pointerId: number)",
    "msSetPointerCapture": "fn(pointerId: number)",
    "msZoomTo": "fn(args: MsZoomToOptions)",
    "setPointerCapture": "fn(pointerId: number)",
    "msGetUntransformedBounds": "fn() -> ClientRect",
    "releasePointerCapture": "fn(pointerId: number)",
    "msRequestFullscreen": "fn()",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "Element"
  },
  "HTMLNextIdElement": {
    "n": "string",
    "prototype": "HTMLNextIdElement"
  },
  "SVGPathSegMovetoRel": {
    "y": "number",
    "x": "number",
    "prototype": "SVGPathSegMovetoRel"
  },
  "SVGLineElement": {
    "y1": "SVGAnimatedLength",
    "x2": "SVGAnimatedLength",
    "x1": "SVGAnimatedLength",
    "y2": "SVGAnimatedLength",
    "prototype": "SVGLineElement"
  },
  "HTMLParagraphElement": {
    "align": "string",
    "prototype": "HTMLParagraphElement"
  },
  "HTMLAreasCollection": {
    "remove": "fn(index?: number)",
    "add": "fn(element: HTMLElement, before?: ?)",
    "prototype": "HTMLAreasCollection"
  },
  "SVGDescElement": {
    "prototype": "SVGDescElement"
  },
  "Node": {
    "nodeType": "number",
    "previousSibling": "Node",
    "localName": "string",
    "namespaceURI": "string",
    "textContent": "string",
    "parentNode": "Node",
    "nextSibling": "Node",
    "nodeValue": "string",
    "lastChild": "Node",
    "childNodes": "NodeList",
    "nodeName": "string",
    "ownerDocument": "Document",
    "attributes": "NamedNodeMap",
    "firstChild": "Node",
    "prefix": "string",
    "removeChild": "fn(oldChild: Node) -> Node",
    "appendChild": "fn(newChild: Node) -> Node",
    "isSupported": "fn(feature: string, version: string) -> bool",
    "isEqualNode": "fn(arg: Node) -> bool",
    "lookupPrefix": "fn(namespaceURI: string) -> string",
    "isDefaultNamespace": "fn(namespaceURI: string) -> bool",
    "compareDocumentPosition": "fn(other: Node) -> number",
    "normalize": "fn()",
    "isSameNode": "fn(other: Node) -> bool",
    "hasAttributes": "fn() -> bool",
    "lookupNamespaceURI": "fn(prefix: string) -> string",
    "cloneNode": "fn(deep?: bool) -> Node",
    "hasChildNodes": "fn() -> bool",
    "replaceChild": "fn(newChild: Node, oldChild: Node) -> Node",
    "insertBefore": "fn(newChild: Node, refChild?: Node) -> Node",
    "ENTITY_REFERENCE_NODE": "number",
    "ATTRIBUTE_NODE": "number",
    "DOCUMENT_FRAGMENT_NODE": "number",
    "TEXT_NODE": "number",
    "ELEMENT_NODE": "number",
    "COMMENT_NODE": "number",
    "DOCUMENT_POSITION_DISCONNECTED": "number",
    "DOCUMENT_POSITION_CONTAINED_BY": "number",
    "DOCUMENT_POSITION_CONTAINS": "number",
    "DOCUMENT_TYPE_NODE": "number",
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": "number",
    "DOCUMENT_NODE": "number",
    "ENTITY_NODE": "number",
    "PROCESSING_INSTRUCTION_NODE": "number",
    "CDATA_SECTION_NODE": "number",
    "NOTATION_NODE": "number",
    "DOCUMENT_POSITION_FOLLOWING": "number",
    "DOCUMENT_POSITION_PRECEDING": "number",
    "prototype": "Node"
  },
  "SVGPathSegCurvetoQuadraticSmoothRel": {
    "y": "number",
    "x": "number",
    "prototype": "SVGPathSegCurvetoQuadraticSmoothRel"
  },
  "DOML2DeprecatedListSpaceReduction": {
    "compact": "bool"
  },
  "MSScriptHost": {
    "prototype": "MSScriptHost"
  },
  "SVGClipPathElement": {
    "clipPathUnits": "SVGAnimatedEnumeration",
    "prototype": "SVGClipPathElement"
  },
  "MouseEvent": {
    "toElement": "Element",
    "layerY": "number",
    "fromElement": "Element",
    "which": "number",
    "pageX": "number",
    "offsetY": "number",
    "x": "number",
    "y": "number",
    "metaKey": "bool",
    "altKey": "bool",
    "ctrlKey": "bool",
    "offsetX": "number",
    "screenX": "number",
    "clientY": "number",
    "shiftKey": "bool",
    "layerX": "number",
    "screenY": "number",
    "relatedTarget": "EventTarget",
    "button": "number",
    "pageY": "number",
    "buttons": "number",
    "clientX": "number",
    "initMouseEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget)",
    "getModifierState": "fn(keyArg: string) -> bool",
    "prototype": "MouseEvent"
  },
  "RangeException": {
    "code": "number",
    "message": "string",
    "name": "string",
    "INVALID_NODE_TYPE_ERR": "number",
    "BAD_BOUNDARYPOINTS_ERR": "number",
    "prototype": "RangeException"
  },
  "SVGTextPositioningElement": {
    "y": "SVGAnimatedLengthList",
    "rotate": "SVGAnimatedNumberList",
    "dy": "SVGAnimatedLengthList",
    "x": "SVGAnimatedLengthList",
    "dx": "SVGAnimatedLengthList",
    "prototype": "SVGTextPositioningElement"
  },
  "HTMLAppletElement": {
    "width": "number",
    "codeType": "string",
    "object": "string",
    "form": "HTMLFormElement",
    "code": "string",
    "archive": "string",
    "alt": "string",
    "standby": "string",
    "classid": "string",
    "name": "string",
    "useMap": "string",
    "data": "string",
    "height": "string",
    "altHtml": "string",
    "contentDocument": "Document",
    "codeBase": "string",
    "declare": "bool",
    "type": "string",
    "BaseHref": "string",
    "prototype": "HTMLAppletElement"
  },
  "TextMetrics": {
    "width": "number",
    "prototype": "TextMetrics"
  },
  "DocumentEvent": {
    "createEvent": "fn(eventInterface: string) -> AnimationEvent"
  },
  "HTMLOListElement": {
    "start": "number",
    "prototype": "HTMLOListElement"
  },
  "SVGPathSegLinetoVerticalRel": {
    "y": "number",
    "prototype": "SVGPathSegLinetoVerticalRel"
  },
  "SVGAnimatedString": {
    "animVal": "string",
    "baseVal": "string",
    "prototype": "SVGAnimatedString"
  },
  "CDATASection": {
    "prototype": "CDATASection"
  },
  "StyleMedia": {
    "type": "string",
    "matchMedium": "fn(mediaquery: string) -> bool",
    "prototype": "StyleMedia"
  },
  "HTMLSelectElement": {
    "options": "HTMLSelectElement",
    "value": "string",
    "form": "HTMLFormElement",
    "name": "string",
    "size": "number",
    "length": "number",
    "selectedIndex": "number",
    "multiple": "bool",
    "type": "string",
    "validationMessage": "string",
    "autofocus": "bool",
    "validity": "ValidityState",
    "required": "bool",
    "willValidate": "bool",
    "remove": "fn(index?: number)",
    "add": "fn(element: HTMLElement, before?: ?)",
    "item": "fn(name?: ?, index?: ?) -> ?",
    "namedItem": "fn(name: string) -> ?",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)",
    "prototype": "HTMLSelectElement"
  },
  "TextRange": {
    "boundingLeft": "number",
    "htmlText": "string",
    "offsetLeft": "number",
    "boundingWidth": "number",
    "boundingHeight": "number",
    "boundingTop": "number",
    "text": "string",
    "offsetTop": "number",
    "moveToPoint": "fn(x: number, y: number)",
    "queryCommandValue": "fn(cmdID: string) -> ?",
    "getBookmark": "fn() -> string",
    "move": "fn(unit: string, count?: number) -> number",
    "queryCommandIndeterm": "fn(cmdID: string) -> bool",
    "scrollIntoView": "fn(fStart?: bool)",
    "findText": "fn(string: string, count?: number, flags?: number) -> bool",
    "execCommand": "fn(cmdID: string, showUI?: bool, value?: ?) -> bool",
    "getBoundingClientRect": "fn() -> ClientRect",
    "moveToBookmark": "fn(bookmark: string) -> bool",
    "isEqual": "fn(range: TextRange) -> bool",
    "duplicate": "fn() -> TextRange",
    "collapse": "fn(start?: bool)",
    "queryCommandText": "fn(cmdID: string) -> string",
    "select": "fn()",
    "pasteHTML": "fn(html: string)",
    "inRange": "fn(range: TextRange) -> bool",
    "moveEnd": "fn(unit: string, count?: number) -> number",
    "getClientRects": "fn() -> ClientRectList",
    "moveStart": "fn(unit: string, count?: number) -> number",
    "parentElement": "fn() -> Element",
    "queryCommandState": "fn(cmdID: string) -> bool",
    "compareEndPoints": "fn(how: string, sourceRange: TextRange) -> number",
    "execCommandShowHelp": "fn(cmdID: string) -> bool",
    "moveToElementText": "fn(element: Element)",
    "expand": "fn(Unit: string) -> bool",
    "queryCommandSupported": "fn(cmdID: string) -> bool",
    "setEndPoint": "fn(how: string, SourceRange: TextRange)",
    "queryCommandEnabled": "fn(cmdID: string) -> bool",
    "prototype": "TextRange"
  },
  "SVGTests": {
    "requiredFeatures": "SVGStringList",
    "requiredExtensions": "SVGStringList",
    "systemLanguage": "SVGStringList",
    "hasExtension": "fn(extension: string) -> bool"
  },
  "HTMLBlockElement": {
    "width": "number",
    "cite": "string",
    "prototype": "HTMLBlockElement"
  },
  "CSSStyleSheet": {
    "owningElement": "Element",
    "imports": "StyleSheetList",
    "isAlternate": "bool",
    "rules": "MSCSSRuleList",
    "isPrefAlternate": "bool",
    "readOnly": "bool",
    "cssText": "string",
    "ownerRule": "CSSRule",
    "href": "string",
    "cssRules": "CSSRuleList",
    "id": "string",
    "pages": "StyleSheetPageList",
    "addImport": "fn(bstrURL: string, lIndex?: number) -> number",
    "addPageRule": "fn(bstrSelector: string, bstrStyle: string, lIndex?: number) -> number",
    "insertRule": "fn(rule: string, index?: number) -> number",
    "removeRule": "fn(lIndex: number)",
    "deleteRule": "fn(index?: number)",
    "addRule": "fn(bstrSelector: string, bstrStyle?: string, lIndex?: number) -> number",
    "removeImport": "fn(lIndex: number)",
    "prototype": "CSSStyleSheet"
  },
  "MSSelection": {
    "type": "string",
    "typeDetail": "string",
    "createRange": "fn() -> TextRange",
    "clear": "fn()",
    "createRangeCollection": "fn() -> TextRangeCollection",
    "empty": "fn()",
    "prototype": "MSSelection"
  },
  "HTMLMetaElement": {
    "httpEquiv": "string",
    "name": "string",
    "content": "string",
    "url": "string",
    "scheme": "string",
    "charset": "string",
    "prototype": "HTMLMetaElement"
  },
  "SVGPatternElement": {
    "patternUnits": "SVGAnimatedEnumeration",
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "x": "SVGAnimatedLength",
    "patternContentUnits": "SVGAnimatedEnumeration",
    "patternTransform": "SVGAnimatedTransformList",
    "height": "SVGAnimatedLength",
    "prototype": "SVGPatternElement"
  },
  "SVGAnimatedAngle": {
    "animVal": "SVGAngle",
    "baseVal": "SVGAngle",
    "prototype": "SVGAnimatedAngle"
  },
  "Selection": {
    "isCollapsed": "bool",
    "anchorNode": "Node",
    "focusNode": "Node",
    "anchorOffset": "number",
    "focusOffset": "number",
    "rangeCount": "number",
    "addRange": "fn(range: Range)",
    "collapseToEnd": "fn()",
    "selectAllChildren": "fn(parentNode: Node)",
    "getRangeAt": "fn(index: number) -> Range",
    "collapse": "fn(parentNode: Node, offset: number)",
    "removeAllRanges": "fn()",
    "collapseToStart": "fn()",
    "deleteFromDocument": "fn()",
    "removeRange": "fn(range: Range)",
    "prototype": "Selection"
  },
  "SVGScriptElement": {
    "type": "string",
    "prototype": "SVGScriptElement"
  },
  "HTMLDDElement": {
    "noWrap": "bool",
    "prototype": "HTMLDDElement"
  },
  "MSDataBindingRecordSetReadonlyExtensions": {
    "recordset": "?",
    "namedRecordset": "fn(dataMember: string, hierarchy?: ?) -> ?"
  },
  "CSSStyleRule": {
    "selectorText": "string",
    "style": "MSStyleCSSProperties",
    "readOnly": "bool",
    "prototype": "CSSStyleRule"
  },
  "NodeIterator": {
    "whatToShow": "number",
    "filter": "NodeFilter",
    "root": "Node",
    "expandEntityReferences": "bool",
    "nextNode": "fn() -> Node",
    "detach": "fn()",
    "previousNode": "fn() -> Node",
    "prototype": "NodeIterator"
  },
  "SVGViewElement": {
    "viewTarget": "SVGStringList",
    "prototype": "SVGViewElement"
  },
  "HTMLLinkElement": {
    "rel": "string",
    "target": "string",
    "href": "string",
    "media": "string",
    "rev": "string",
    "type": "string",
    "charset": "string",
    "hreflang": "string",
    "prototype": "HTMLLinkElement"
  },
  "SVGLocatable": {
    "farthestViewportElement": "SVGElement",
    "nearestViewportElement": "SVGElement",
    "getBBox": "fn() -> SVGRect",
    "getTransformToElement": "fn(element: SVGElement) -> SVGMatrix",
    "getCTM": "fn() -> SVGMatrix",
    "getScreenCTM": "fn() -> SVGMatrix"
  },
  "HTMLFontElement": {
    "face": "string",
    "prototype": "HTMLFontElement"
  },
  "SVGTitleElement": {
    "prototype": "SVGTitleElement"
  },
  "ControlRangeCollection": {
    "length": "number",
    "queryCommandValue": "fn(cmdID: string) -> ?",
    "remove": "fn(index: number)",
    "add": "fn(item: Element)",
    "queryCommandIndeterm": "fn(cmdID: string) -> bool",
    "scrollIntoView": "fn(varargStart?: ?)",
    "item": "fn(index: number) -> Element",
    "execCommand": "fn(cmdID: string, showUI?: bool, value?: ?) -> bool",
    "addElement": "fn(item: Element)",
    "queryCommandState": "fn(cmdID: string) -> bool",
    "queryCommandSupported": "fn(cmdID: string) -> bool",
    "queryCommandEnabled": "fn(cmdID: string) -> bool",
    "queryCommandText": "fn(cmdID: string) -> string",
    "select": "fn()",
    "prototype": "ControlRangeCollection"
  },
  "MSNamespaceInfo": {
    "urn": "string",
    "onreadystatechange": "fn(ev: Event)",
    "name": "string",
    "readyState": "string",
    "doImport": "fn(implementationUrl: string)",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "MSNamespaceInfo"
  },
  "WindowSessionStorage": {
    "sessionStorage": "Storage"
  },
  "SVGAnimatedTransformList": {
    "animVal": "SVGTransformList",
    "baseVal": "SVGTransformList",
    "prototype": "SVGAnimatedTransformList"
  },
  "HTMLTableCaptionElement": {
    "align": "string",
    "vAlign": "string",
    "prototype": "HTMLTableCaptionElement"
  },
  "HTMLOptionElement": {
    "index": "number",
    "defaultSelected": "bool",
    "value": "string",
    "text": "string",
    "form": "HTMLFormElement",
    "label": "string",
    "selected": "bool",
    "prototype": "HTMLOptionElement",
    "create": "fn() -> HTMLOptionElement"
  },
  "HTMLMapElement": {
    "name": "string",
    "areas": "HTMLAreasCollection",
    "prototype": "HTMLMapElement"
  },
  "HTMLMenuElement": {
    "type": "string",
    "prototype": "HTMLMenuElement"
  },
  "MouseWheelEvent": {
    "wheelDelta": "number",
    "initMouseWheelEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, wheelDeltaArg: number)",
    "prototype": "MouseWheelEvent"
  },
  "SVGFitToViewBox": {
    "viewBox": "SVGAnimatedRect",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio"
  },
  "SVGPointList": {
    "numberOfItems": "number",
    "replaceItem": "fn(newItem: SVGPoint, index: number) -> SVGPoint",
    "getItem": "fn(index: number) -> SVGPoint",
    "clear": "fn()",
    "appendItem": "fn(newItem: SVGPoint) -> SVGPoint",
    "initialize": "fn(newItem: SVGPoint) -> SVGPoint",
    "removeItem": "fn(index: number) -> SVGPoint",
    "insertItemBefore": "fn(newItem: SVGPoint, index: number) -> SVGPoint",
    "prototype": "SVGPointList"
  },
  "SVGAnimatedLengthList": {
    "animVal": "SVGLengthList",
    "baseVal": "SVGLengthList",
    "prototype": "SVGAnimatedLengthList"
  },
  "SVGAnimatedPreserveAspectRatio": {
    "animVal": "SVGPreserveAspectRatio",
    "baseVal": "SVGPreserveAspectRatio",
    "prototype": "SVGAnimatedPreserveAspectRatio"
  },
  "MSSiteModeEvent": {
    "buttonID": "number",
    "actionURL": "string",
    "prototype": "MSSiteModeEvent"
  },
  "DOML2DeprecatedTextFlowControl": {
    "clear": "string"
  },
  "StyleSheetPageList": {
    "length": "number",
    "item": "fn(index: number) -> CSSPageRule",
    "prototype": "StyleSheetPageList"
  },
  "MSCSSProperties": {
    "scrollbarShadowColor": "string",
    "scrollbarHighlightColor": "string",
    "layoutGridChar": "string",
    "layoutGridType": "string",
    "textAutospace": "string",
    "textKashidaSpace": "string",
    "writingMode": "string",
    "scrollbarFaceColor": "string",
    "backgroundPositionY": "string",
    "lineBreak": "string",
    "imeMode": "string",
    "msBlockProgression": "string",
    "layoutGridLine": "string",
    "scrollbarBaseColor": "string",
    "layoutGrid": "string",
    "layoutFlow": "string",
    "textKashida": "string",
    "filter": "string",
    "zoom": "string",
    "scrollbarArrowColor": "string",
    "behavior": "string",
    "backgroundPositionX": "string",
    "accelerator": "string",
    "layoutGridMode": "string",
    "textJustifyTrim": "string",
    "scrollbar3dLightColor": "string",
    "msInterpolationMode": "string",
    "scrollbarTrackColor": "string",
    "scrollbarDarkShadowColor": "string",
    "styleFloat": "string",
    "getAttribute": "fn(attributeName: string, flags?: number) -> ?",
    "setAttribute": "fn(attributeName: string, AttributeValue: ?, flags?: number)",
    "removeAttribute": "fn(attributeName: string, flags?: number) -> bool",
    "prototype": "MSCSSProperties"
  },
  "SVGExternalResourcesRequired": {
    "externalResourcesRequired": "SVGAnimatedBoolean"
  },
  "HTMLImageElement": {
    "width": "number",
    "vspace": "number",
    "naturalHeight": "number",
    "alt": "string",
    "align": "string",
    "src": "string",
    "useMap": "string",
    "naturalWidth": "number",
    "name": "string",
    "height": "number",
    "border": "string",
    "hspace": "number",
    "longDesc": "string",
    "href": "string",
    "isMap": "bool",
    "complete": "bool",
    "msPlayToPrimary": "bool",
    "msPlayToDisabled": "bool",
    "msPlayToSource": "?",
    "crossOrigin": "string",
    "msPlayToPreferredSourceUri": "string",
    "prototype": "HTMLImageElement",
    "create": "fn() -> HTMLImageElement"
  },
  "HTMLAreaElement": {
    "protocol": "string",
    "search": "string",
    "alt": "string",
    "coords": "string",
    "hostname": "string",
    "port": "string",
    "pathname": "string",
    "host": "string",
    "hash": "string",
    "target": "string",
    "href": "string",
    "noHref": "bool",
    "shape": "string",
    "prototype": "HTMLAreaElement"
  },
  "EventTarget": {
    "removeEventListener": "fn(type: string, listener: EventListener, useCapture?: bool)",
    "addEventListener": "fn(type: string, listener: EventListener, useCapture?: bool)",
    "dispatchEvent": "fn(evt: Event) -> bool"
  },
  "SVGAngle": {
    "valueAsString": "string",
    "valueInSpecifiedUnits": "number",
    "value": "number",
    "unitType": "number",
    "newValueSpecifiedUnits": "fn(unitType: number, valueInSpecifiedUnits: number)",
    "convertToSpecifiedUnits": "fn(unitType: number)",
    "SVG_ANGLETYPE_RAD": "number",
    "SVG_ANGLETYPE_UNKNOWN": "number",
    "SVG_ANGLETYPE_UNSPECIFIED": "number",
    "SVG_ANGLETYPE_DEG": "number",
    "SVG_ANGLETYPE_GRAD": "number",
    "prototype": "SVGAngle"
  },
  "HTMLButtonElement": {
    "value": "string",
    "status": "?",
    "form": "HTMLFormElement",
    "name": "string",
    "type": "string",
    "validationMessage": "string",
    "formTarget": "string",
    "willValidate": "bool",
    "formAction": "string",
    "autofocus": "bool",
    "validity": "ValidityState",
    "formNoValidate": "string",
    "formEnctype": "string",
    "formMethod": "string",
    "createTextRange": "fn() -> TextRange",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)",
    "prototype": "HTMLButtonElement"
  },
  "HTMLSourceElement": {
    "src": "string",
    "media": "string",
    "type": "string",
    "msKeySystem": "string",
    "prototype": "HTMLSourceElement"
  },
  "CanvasGradient": {
    "addColorStop": "fn(offset: number, color: string)",
    "prototype": "CanvasGradient"
  },
  "KeyboardEvent": {
    "location": "number",
    "keyCode": "number",
    "shiftKey": "bool",
    "which": "number",
    "locale": "string",
    "key": "string",
    "altKey": "bool",
    "metaKey": "bool",
    "char": "string",
    "ctrlKey": "bool",
    "repeat": "bool",
    "charCode": "number",
    "getModifierState": "fn(keyArg: string) -> bool",
    "initKeyboardEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: bool, locale: string)",
    "DOM_KEY_LOCATION_RIGHT": "number",
    "DOM_KEY_LOCATION_STANDARD": "number",
    "DOM_KEY_LOCATION_LEFT": "number",
    "DOM_KEY_LOCATION_NUMPAD": "number",
    "DOM_KEY_LOCATION_JOYSTICK": "number",
    "DOM_KEY_LOCATION_MOBILE": "number",
    "prototype": "KeyboardEvent"
  },
  "MessageEvent": {
    "source": "Window",
    "origin": "string",
    "data": "?",
    "ports": "?",
    "initMessageEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, dataArg: ?, originArg: string, lastEventIdArg: string, sourceArg: Window)",
    "prototype": "MessageEvent"
  },
  "SVGElement": {
    "onmouseover": "fn(ev: MouseEvent)",
    "viewportElement": "SVGElement",
    "onmousemove": "fn(ev: MouseEvent)",
    "onmouseout": "fn(ev: MouseEvent)",
    "ondblclick": "fn(ev: MouseEvent)",
    "onfocusout": "fn(ev: FocusEvent)",
    "onfocusin": "fn(ev: FocusEvent)",
    "xmlbase": "string",
    "onmousedown": "fn(ev: MouseEvent)",
    "onload": "fn(ev: Event)",
    "onmouseup": "fn(ev: MouseEvent)",
    "onclick": "fn(ev: MouseEvent)",
    "ownerSVGElement": "SVGSVGElement",
    "id": "string",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "SVGElement"
  },
  "HTMLScriptElement": {
    "defer": "bool",
    "text": "string",
    "src": "string",
    "htmlFor": "string",
    "charset": "string",
    "type": "string",
    "event": "string",
    "async": "bool",
    "prototype": "HTMLScriptElement"
  },
  "HTMLTableRowElement": {
    "rowIndex": "number",
    "cells": "HTMLCollection",
    "align": "string",
    "borderColorLight": "?",
    "sectionRowIndex": "number",
    "borderColor": "?",
    "height": "?",
    "borderColorDark": "?",
    "deleteCell": "fn(index?: number)",
    "insertCell": "fn(index?: number) -> HTMLElement",
    "prototype": "HTMLTableRowElement"
  },
  "CanvasRenderingContext2D": {
    "miterLimit": "number",
    "font": "string",
    "globalCompositeOperation": "string",
    "msFillRule": "string",
    "lineCap": "string",
    "msImageSmoothingEnabled": "bool",
    "lineDashOffset": "number",
    "shadowColor": "string",
    "lineJoin": "string",
    "shadowOffsetX": "number",
    "lineWidth": "number",
    "canvas": "HTMLCanvasElement",
    "strokeStyle": "?",
    "globalAlpha": "number",
    "shadowOffsetY": "number",
    "fillStyle": "?",
    "shadowBlur": "number",
    "textAlign": "string",
    "textBaseline": "string",
    "restore": "fn()",
    "setTransform": "fn(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number)",
    "save": "fn()",
    "arc": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: bool)",
    "measureText": "fn(text: string) -> TextMetrics",
    "isPointInPath": "fn(x: number, y: number, fillRule?: string) -> bool",
    "quadraticCurveTo": "fn(cpx: number, cpy: number, x: number, y: number)",
    "putImageData": "fn(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number)",
    "rotate": "fn(angle: number)",
    "fillText": "fn(text: string, x: number, y: number, maxWidth?: number)",
    "translate": "fn(x: number, y: number)",
    "scale": "fn(x: number, y: number)",
    "createRadialGradient": "fn(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number) -> CanvasGradient",
    "lineTo": "fn(x: number, y: number)",
    "getLineDash": "fn() -> [number]",
    "fill": "fn(fillRule?: string)",
    "createImageData": "fn(imageDataOrSw: ?, sh?: number) -> ImageData",
    "createPattern": "fn(image: HTMLElement, repetition: string) -> CanvasPattern",
    "closePath": "fn()",
    "rect": "fn(x: number, y: number, w: number, h: number)",
    "clip": "fn(fillRule?: string)",
    "clearRect": "fn(x: number, y: number, w: number, h: number)",
    "moveTo": "fn(x: number, y: number)",
    "getImageData": "fn(sx: number, sy: number, sw: number, sh: number) -> ImageData",
    "fillRect": "fn(x: number, y: number, w: number, h: number)",
    "bezierCurveTo": "fn(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number)",
    "drawImage": "fn(image: HTMLElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number)",
    "transform": "fn(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number)",
    "stroke": "fn()",
    "strokeRect": "fn(x: number, y: number, w: number, h: number)",
    "setLineDash": "fn(segments: [number])",
    "strokeText": "fn(text: string, x: number, y: number, maxWidth?: number)",
    "beginPath": "fn()",
    "arcTo": "fn(x1: number, y1: number, x2: number, y2: number, radius: number)",
    "createLinearGradient": "fn(x0: number, y0: number, x1: number, y1: number) -> CanvasGradient",
    "prototype": "CanvasRenderingContext2D"
  },
  "MSCSSRuleList": {
    "length": "number",
    "item": "fn(index?: number) -> CSSStyleRule",
    "prototype": "MSCSSRuleList"
  },
  "SVGPathSegLinetoHorizontalAbs": {
    "x": "number",
    "prototype": "SVGPathSegLinetoHorizontalAbs"
  },
  "SVGPathSegArcAbs": {
    "y": "number",
    "sweepFlag": "bool",
    "r2": "number",
    "x": "number",
    "angle": "number",
    "r1": "number",
    "largeArcFlag": "bool",
    "prototype": "SVGPathSegArcAbs"
  },
  "SVGTransformList": {
    "numberOfItems": "number",
    "getItem": "fn(index: number) -> SVGTransform",
    "consolidate": "fn() -> SVGTransform",
    "clear": "fn()",
    "appendItem": "fn(newItem: SVGTransform) -> SVGTransform",
    "initialize": "fn(newItem: SVGTransform) -> SVGTransform",
    "removeItem": "fn(index: number) -> SVGTransform",
    "insertItemBefore": "fn(newItem: SVGTransform, index: number) -> SVGTransform",
    "replaceItem": "fn(newItem: SVGTransform, index: number) -> SVGTransform",
    "createSVGTransformFromMatrix": "fn(matrix: SVGMatrix) -> SVGTransform",
    "prototype": "SVGTransformList"
  },
  "HTMLHtmlElement": {
    "version": "string",
    "prototype": "HTMLHtmlElement"
  },
  "SVGPathSegClosePath": {
    "prototype": "SVGPathSegClosePath"
  },
  "HTMLFrameElement": {
    "width": "?",
    "scrolling": "string",
    "marginHeight": "string",
    "marginWidth": "string",
    "borderColor": "?",
    "frameSpacing": "?",
    "frameBorder": "string",
    "noResize": "bool",
    "contentWindow": "Window",
    "src": "string",
    "name": "string",
    "height": "?",
    "contentDocument": "Document",
    "border": "string",
    "longDesc": "string",
    "onload": "fn(ev: Event)",
    "security": "?",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "HTMLFrameElement"
  },
  "SVGAnimatedLength": {
    "animVal": "SVGLength",
    "baseVal": "SVGLength",
    "prototype": "SVGAnimatedLength"
  },
  "SVGAnimatedPoints": {
    "points": "SVGPointList",
    "animatedPoints": "SVGPointList"
  },
  "SVGDefsElement": {
    "prototype": "SVGDefsElement"
  },
  "HTMLQuoteElement": {
    "dateTime": "string",
    "cite": "string",
    "prototype": "HTMLQuoteElement"
  },
  "CSSMediaRule": {
    "media": "MediaList",
    "cssRules": "CSSRuleList",
    "insertRule": "fn(rule: string, index?: number) -> number",
    "deleteRule": "fn(index?: number)",
    "prototype": "CSSMediaRule"
  },
  "WindowModal": {
    "dialogArguments": "?",
    "returnValue": "?"
  },
  "XMLHttpRequest": {
    "responseBody": "?",
    "status": "number",
    "readyState": "number",
    "responseText": "string",
    "responseXML": "?",
    "ontimeout": "fn(ev: Event)",
    "statusText": "string",
    "onreadystatechange": "fn(ev: Event)",
    "timeout": "number",
    "onload": "fn(ev: Event)",
    "response": "?",
    "withCredentials": "bool",
    "onprogress": "fn(ev: ProgressEvent)",
    "onabort": "fn(ev: UIEvent)",
    "responseType": "string",
    "onloadend": "fn(ev: ProgressEvent)",
    "upload": "XMLHttpRequestEventTarget",
    "onerror": "fn(ev: ErrorEvent)",
    "onloadstart": "fn(ev: Event)",
    "msCaching": "string",
    "open": "fn(method: string, url: string, async?: bool, user?: string, password?: string)",
    "send": "fn(data?: ?)",
    "abort": "fn()",
    "getAllResponseHeaders": "fn() -> string",
    "setRequestHeader": "fn(header: string, value: string)",
    "getResponseHeader": "fn(header: string) -> string",
    "msCachingEnabled": "fn() -> bool",
    "overrideMimeType": "fn(mime: string)",
    "LOADING": "number",
    "DONE": "number",
    "UNSENT": "number",
    "OPENED": "number",
    "HEADERS_RECEIVED": "number",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "XMLHttpRequest",
    "create": "fn() -> XMLHttpRequest"
  },
  "HTMLTableHeaderCellElement": {
    "scope": "string",
    "prototype": "HTMLTableHeaderCellElement"
  },
  "HTMLDListElement": {
    "prototype": "HTMLDListElement"
  },
  "MSDataBindingExtensions": {
    "dataSrc": "string",
    "dataFormatAs": "string",
    "dataFld": "string"
  },
  "SVGPathSegLinetoHorizontalRel": {
    "x": "number",
    "prototype": "SVGPathSegLinetoHorizontalRel"
  },
  "SVGEllipseElement": {
    "ry": "SVGAnimatedLength",
    "cx": "SVGAnimatedLength",
    "rx": "SVGAnimatedLength",
    "cy": "SVGAnimatedLength",
    "prototype": "SVGEllipseElement"
  },
  "SVGAElement": {
    "target": "SVGAnimatedString",
    "prototype": "SVGAElement"
  },
  "SVGStylable": {
    "className": "SVGAnimatedString",
    "style": "CSSStyleDeclaration"
  },
  "SVGTransformable": {
    "transform": "SVGAnimatedTransformList"
  },
  "HTMLFrameSetElement": {
    "ononline": "fn(ev: Event)",
    "borderColor": "?",
    "rows": "string",
    "cols": "string",
    "onblur": "fn(ev: FocusEvent)",
    "frameSpacing": "?",
    "onfocus": "fn(ev: FocusEvent)",
    "onmessage": "fn(ev: MessageEvent)",
    "onerror": "fn(ev: ErrorEvent)",
    "frameBorder": "string",
    "onresize": "fn(ev: UIEvent)",
    "name": "string",
    "onafterprint": "fn(ev: Event)",
    "onbeforeprint": "fn(ev: Event)",
    "onoffline": "fn(ev: Event)",
    "border": "string",
    "onunload": "fn(ev: Event)",
    "onhashchange": "fn(ev: Event)",
    "onload": "fn(ev: Event)",
    "onbeforeunload": "fn(ev: BeforeUnloadEvent)",
    "onstorage": "fn(ev: StorageEvent)",
    "onpageshow": "fn(ev: PageTransitionEvent)",
    "onpagehide": "fn(ev: PageTransitionEvent)",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "HTMLFrameSetElement"
  },
  "Screen": {
    "width": "number",
    "deviceXDPI": "number",
    "fontSmoothingEnabled": "bool",
    "bufferDepth": "number",
    "logicalXDPI": "number",
    "systemXDPI": "number",
    "availHeight": "number",
    "height": "number",
    "logicalYDPI": "number",
    "systemYDPI": "number",
    "updateInterval": "number",
    "colorDepth": "number",
    "availWidth": "number",
    "deviceYDPI": "number",
    "pixelDepth": "number",
    "msOrientation": "string",
    "onmsorientationchange": "fn(ev: ?)",
    "msLockOrientation": "fn(orientation: string) -> bool",
    "msUnlockOrientation": "fn()",
    "addEventListener": "fn(type: string, listener: fn(ev: ?), useCapture?: bool)",
    "prototype": "Screen"
  },
  "Coordinates": {
    "altitudeAccuracy": "number",
    "longitude": "number",
    "latitude": "number",
    "speed": "number",
    "heading": "number",
    "altitude": "number",
    "accuracy": "number",
    "prototype": "Coordinates"
  },
  "NavigatorGeolocation": {
    "geolocation": "Geolocation"
  },
  "NavigatorContentUtils": {},
  "EventListener": {},
  "SVGLangSpace": {
    "xmllang": "string",
    "xmlspace": "string"
  },
  "DataTransfer": {
    "effectAllowed": "string",
    "dropEffect": "string",
    "types": "DOMStringList",
    "files": "FileList",
    "clearData": "fn(format?: string) -> bool",
    "setData": "fn(format: string, data: string) -> bool",
    "getData": "fn(format: string) -> string",
    "prototype": "DataTransfer"
  },
  "FocusEvent": {
    "relatedTarget": "EventTarget",
    "initFocusEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget)",
    "prototype": "FocusEvent"
  },
  "Range": {
    "startOffset": "number",
    "collapsed": "bool",
    "endOffset": "number",
    "startContainer": "Node",
    "endContainer": "Node",
    "commonAncestorContainer": "Node",
    "setStart": "fn(refNode: Node, offset: number)",
    "setEndBefore": "fn(refNode: Node)",
    "setStartBefore": "fn(refNode: Node)",
    "selectNode": "fn(refNode: Node)",
    "detach": "fn()",
    "getBoundingClientRect": "fn() -> ClientRect",
    "compareBoundaryPoints": "fn(how: number, sourceRange: Range) -> number",
    "insertNode": "fn(newNode: Node)",
    "collapse": "fn(toStart: bool)",
    "selectNodeContents": "fn(refNode: Node)",
    "cloneContents": "fn() -> DocumentFragment",
    "setEnd": "fn(refNode: Node, offset: number)",
    "cloneRange": "fn() -> Range",
    "getClientRects": "fn() -> ClientRectList",
    "surroundContents": "fn(newParent: Node)",
    "deleteContents": "fn()",
    "setStartAfter": "fn(refNode: Node)",
    "extractContents": "fn() -> DocumentFragment",
    "setEndAfter": "fn(refNode: Node)",
    "createContextualFragment": "fn(fragment: string) -> DocumentFragment",
    "END_TO_END": "number",
    "START_TO_START": "number",
    "START_TO_END": "number",
    "END_TO_START": "number",
    "prototype": "Range"
  },
  "SVGPoint": {
    "y": "number",
    "x": "number",
    "matrixTransform": "fn(matrix: SVGMatrix) -> SVGPoint",
    "prototype": "SVGPoint"
  },
  "MSPluginsCollection": {
    "length": "number",
    "refresh": "fn(reload?: bool)",
    "prototype": "MSPluginsCollection"
  },
  "SVGAnimatedNumberList": {
    "animVal": "SVGNumberList",
    "baseVal": "SVGNumberList",
    "prototype": "SVGAnimatedNumberList"
  },
  "SVGSVGElement": {
    "width": "SVGAnimatedLength",
    "x": "SVGAnimatedLength",
    "contentStyleType": "string",
    "onzoom": "fn(ev: ?)",
    "y": "SVGAnimatedLength",
    "viewport": "SVGRect",
    "onerror": "fn(ev: ErrorEvent)",
    "pixelUnitToMillimeterY": "number",
    "onresize": "fn(ev: UIEvent)",
    "screenPixelToMillimeterY": "number",
    "height": "SVGAnimatedLength",
    "onabort": "fn(ev: UIEvent)",
    "contentScriptType": "string",
    "pixelUnitToMillimeterX": "number",
    "currentTranslate": "SVGPoint",
    "onunload": "fn(ev: Event)",
    "currentScale": "number",
    "onscroll": "fn(ev: UIEvent)",
    "screenPixelToMillimeterX": "number",
    "setCurrentTime": "fn(seconds: number)",
    "createSVGLength": "fn() -> SVGLength",
    "getIntersectionList": "fn(rect: SVGRect, referenceElement: SVGElement) -> NodeList",
    "unpauseAnimations": "fn()",
    "createSVGRect": "fn() -> SVGRect",
    "checkIntersection": "fn(element: SVGElement, rect: SVGRect) -> bool",
    "unsuspendRedrawAll": "fn()",
    "pauseAnimations": "fn()",
    "suspendRedraw": "fn(maxWaitMilliseconds: number) -> number",
    "deselectAll": "fn()",
    "createSVGAngle": "fn() -> SVGAngle",
    "getEnclosureList": "fn(rect: SVGRect, referenceElement: SVGElement) -> NodeList",
    "createSVGTransform": "fn() -> SVGTransform",
    "unsuspendRedraw": "fn(suspendHandleID: number)",
    "forceRedraw": "fn()",
    "getCurrentTime": "fn() -> number",
    "checkEnclosure": "fn(element: SVGElement, rect: SVGRect) -> bool",
    "createSVGMatrix": "fn() -> SVGMatrix",
    "createSVGPoint": "fn() -> SVGPoint",
    "createSVGNumber": "fn() -> SVGNumber",
    "createSVGTransformFromMatrix": "fn(matrix: SVGMatrix) -> SVGTransform",
    "getComputedStyle": "fn(elt: Element, pseudoElt?: string) -> CSSStyleDeclaration",
    "getElementById": "fn(elementId: string) -> Element",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "SVGSVGElement"
  },
  "HTMLLabelElement": {
    "htmlFor": "string",
    "form": "HTMLFormElement",
    "prototype": "HTMLLabelElement"
  },
  "MSResourceMetadata": {
    "protocol": "string",
    "fileSize": "string",
    "fileUpdatedDate": "string",
    "nameProp": "string",
    "fileCreatedDate": "string",
    "fileModifiedDate": "string",
    "mimeType": "string"
  },
  "HTMLLegendElement": {
    "align": "string",
    "form": "HTMLFormElement",
    "prototype": "HTMLLegendElement"
  },
  "HTMLDirectoryElement": {
    "prototype": "HTMLDirectoryElement"
  },
  "SVGAnimatedInteger": {
    "animVal": "number",
    "baseVal": "number",
    "prototype": "SVGAnimatedInteger"
  },
  "SVGTextElement": {
    "prototype": "SVGTextElement"
  },
  "SVGTSpanElement": {
    "prototype": "SVGTSpanElement"
  },
  "HTMLLIElement": {
    "value": "number",
    "prototype": "HTMLLIElement"
  },
  "SVGPathSegLinetoVerticalAbs": {
    "y": "number",
    "prototype": "SVGPathSegLinetoVerticalAbs"
  },
  "MSStorageExtensions": {
    "remainingSpace": "number"
  },
  "SVGStyleElement": {
    "media": "string",
    "type": "string",
    "title": "string",
    "prototype": "SVGStyleElement"
  },
  "MSCurrentStyleCSSProperties": {
    "blockDirection": "string",
    "clipBottom": "string",
    "clipLeft": "string",
    "clipRight": "string",
    "clipTop": "string",
    "hasLayout": "string",
    "prototype": "MSCurrentStyleCSSProperties"
  },
  "MSHTMLCollectionExtensions": {
    "urns": "fn(urn: ?) -> ?",
    "tags": "fn(tagName: ?) -> ?"
  },
  "Storage": {
    "length": "number",
    "getItem": "fn(key: string) -> ?",
    "setItem": "fn(key: string, data: string)",
    "clear": "fn()",
    "removeItem": "fn(key: string)",
    "key": "fn(index: number) -> string",
    "prototype": "Storage"
  },
  "HTMLIFrameElement": {
    "width": "string",
    "scrolling": "string",
    "marginHeight": "string",
    "marginWidth": "string",
    "frameSpacing": "?",
    "frameBorder": "string",
    "noResize": "bool",
    "vspace": "number",
    "contentWindow": "Window",
    "align": "string",
    "src": "string",
    "name": "string",
    "height": "string",
    "border": "string",
    "contentDocument": "Document",
    "hspace": "number",
    "longDesc": "string",
    "security": "?",
    "onload": "fn(ev: Event)",
    "sandbox": "DOMSettableTokenList",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "HTMLIFrameElement"
  },
  "TextRangeCollection": {
    "length": "number",
    "item": "fn(index: number) -> TextRange",
    "prototype": "TextRangeCollection"
  },
  "HTMLBodyElement": {
    "scroll": "string",
    "ononline": "fn(ev: Event)",
    "onblur": "fn(ev: FocusEvent)",
    "noWrap": "bool",
    "onfocus": "fn(ev: FocusEvent)",
    "onmessage": "fn(ev: MessageEvent)",
    "text": "?",
    "onerror": "fn(ev: ErrorEvent)",
    "bgProperties": "string",
    "onresize": "fn(ev: UIEvent)",
    "link": "?",
    "aLink": "?",
    "bottomMargin": "?",
    "topMargin": "?",
    "onafterprint": "fn(ev: Event)",
    "vLink": "?",
    "onbeforeprint": "fn(ev: Event)",
    "onoffline": "fn(ev: Event)",
    "onunload": "fn(ev: Event)",
    "onhashchange": "fn(ev: Event)",
    "onload": "fn(ev: Event)",
    "rightMargin": "?",
    "onbeforeunload": "fn(ev: BeforeUnloadEvent)",
    "leftMargin": "?",
    "onstorage": "fn(ev: StorageEvent)",
    "onpopstate": "fn(ev: PopStateEvent)",
    "onpageshow": "fn(ev: PageTransitionEvent)",
    "onpagehide": "fn(ev: PageTransitionEvent)",
    "createTextRange": "fn() -> TextRange",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "HTMLBodyElement"
  },
  "DocumentType": {
    "name": "string",
    "notations": "NamedNodeMap",
    "systemId": "string",
    "internalSubset": "string",
    "entities": "NamedNodeMap",
    "publicId": "string",
    "prototype": "DocumentType"
  },
  "SVGRadialGradientElement": {
    "cx": "SVGAnimatedLength",
    "r": "SVGAnimatedLength",
    "cy": "SVGAnimatedLength",
    "fx": "SVGAnimatedLength",
    "fy": "SVGAnimatedLength",
    "prototype": "SVGRadialGradientElement"
  },
  "MutationEvent": {
    "newValue": "string",
    "attrChange": "number",
    "attrName": "string",
    "prevValue": "string",
    "relatedNode": "Node",
    "initMutationEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number)",
    "MODIFICATION": "number",
    "REMOVAL": "number",
    "ADDITION": "number",
    "prototype": "MutationEvent"
  },
  "DragEvent": {
    "dataTransfer": "DataTransfer",
    "initDragEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer)",
    "msConvertURL": "fn(file: File, targetType: string, targetURL?: string)",
    "prototype": "DragEvent"
  },
  "HTMLTableSectionElement": {
    "align": "string",
    "rows": "HTMLCollection",
    "deleteRow": "fn(index?: number)",
    "moveRow": "fn(indexFrom?: number, indexTo?: number) -> ?",
    "insertRow": "fn(index?: number) -> HTMLElement",
    "prototype": "HTMLTableSectionElement"
  },
  "DOML2DeprecatedListNumberingAndBulletStyle": {
    "type": "string"
  },
  "HTMLInputElement": {
    "width": "string",
    "status": "bool",
    "form": "HTMLFormElement",
    "selectionStart": "number",
    "indeterminate": "bool",
    "readOnly": "bool",
    "size": "number",
    "loop": "number",
    "selectionEnd": "number",
    "vrml": "string",
    "lowsrc": "string",
    "vspace": "number",
    "accept": "string",
    "alt": "string",
    "defaultChecked": "bool",
    "align": "string",
    "value": "string",
    "src": "string",
    "name": "string",
    "useMap": "string",
    "height": "string",
    "border": "string",
    "dynsrc": "string",
    "checked": "bool",
    "hspace": "number",
    "maxLength": "number",
    "type": "string",
    "defaultValue": "string",
    "complete": "bool",
    "start": "string",
    "validationMessage": "string",
    "files": "FileList",
    "max": "string",
    "formTarget": "string",
    "willValidate": "bool",
    "step": "string",
    "autofocus": "bool",
    "required": "bool",
    "formEnctype": "string",
    "valueAsNumber": "number",
    "placeholder": "string",
    "formMethod": "string",
    "list": "HTMLElement",
    "autocomplete": "string",
    "min": "string",
    "formAction": "string",
    "pattern": "string",
    "validity": "ValidityState",
    "formNoValidate": "string",
    "multiple": "bool",
    "createTextRange": "fn() -> TextRange",
    "setSelectionRange": "fn(start: number, end: number)",
    "select": "fn()",
    "checkValidity": "fn() -> bool",
    "stepDown": "fn(n?: number)",
    "stepUp": "fn(n?: number)",
    "setCustomValidity": "fn(error: string)",
    "prototype": "HTMLInputElement"
  },
  "HTMLAnchorElement": {
    "rel": "string",
    "protocol": "string",
    "search": "string",
    "coords": "string",
    "hostname": "string",
    "pathname": "string",
    "Methods": "string",
    "target": "string",
    "protocolLong": "string",
    "href": "string",
    "name": "string",
    "charset": "string",
    "hreflang": "string",
    "port": "string",
    "host": "string",
    "hash": "string",
    "nameProp": "string",
    "urn": "string",
    "rev": "string",
    "shape": "string",
    "type": "string",
    "mimeType": "string",
    "text": "string",
    "prototype": "HTMLAnchorElement"
  },
  "HTMLParamElement": {
    "value": "string",
    "name": "string",
    "type": "string",
    "valueType": "string",
    "prototype": "HTMLParamElement"
  },
  "SVGImageElement": {
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio",
    "x": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "prototype": "SVGImageElement"
  },
  "SVGAnimatedNumber": {
    "animVal": "number",
    "baseVal": "number",
    "prototype": "SVGAnimatedNumber"
  },
  "PerformanceTiming": {
    "redirectStart": "number",
    "domainLookupEnd": "number",
    "responseStart": "number",
    "domComplete": "number",
    "domainLookupStart": "number",
    "loadEventStart": "number",
    "msFirstPaint": "number",
    "unloadEventEnd": "number",
    "fetchStart": "number",
    "requestStart": "number",
    "domInteractive": "number",
    "navigationStart": "number",
    "connectEnd": "number",
    "loadEventEnd": "number",
    "connectStart": "number",
    "responseEnd": "number",
    "domLoading": "number",
    "redirectEnd": "number",
    "unloadEventStart": "number",
    "domContentLoadedEventStart": "number",
    "domContentLoadedEventEnd": "number",
    "toJSON": "fn() -> ?",
    "prototype": "PerformanceTiming"
  },
  "HTMLPreElement": {
    "width": "number",
    "cite": "string",
    "prototype": "HTMLPreElement"
  },
  "EventException": {
    "code": "number",
    "message": "string",
    "name": "string",
    "DISPATCH_REQUEST_ERR": "number",
    "UNSPECIFIED_EVENT_TYPE_ERR": "number",
    "prototype": "EventException"
  },
  "MSNavigatorDoNotTrack": {
    "msDoNotTrack": "string",
    "removeSiteSpecificTrackingException": "fn(args: ExceptionInformation)",
    "removeWebWideTrackingException": "fn(args: ExceptionInformation)",
    "storeWebWideTrackingException": "fn(args: StoreExceptionsInformation)",
    "storeSiteSpecificTrackingException": "fn(args: StoreSiteSpecificExceptionsInformation)",
    "confirmSiteSpecificTrackingException": "fn(args: ConfirmSiteSpecificExceptionsInformation) -> bool",
    "confirmWebWideTrackingException": "fn(args: ExceptionInformation) -> bool"
  },
  "NavigatorOnLine": {
    "onLine": "bool"
  },
  "WindowLocalStorage": {
    "localStorage": "Storage"
  },
  "SVGMetadataElement": {
    "prototype": "SVGMetadataElement"
  },
  "SVGPathSegArcRel": {
    "y": "number",
    "sweepFlag": "bool",
    "r2": "number",
    "x": "number",
    "angle": "number",
    "r1": "number",
    "largeArcFlag": "bool",
    "prototype": "SVGPathSegArcRel"
  },
  "SVGPathSegMovetoAbs": {
    "y": "number",
    "x": "number",
    "prototype": "SVGPathSegMovetoAbs"
  },
  "SVGStringList": {
    "numberOfItems": "number",
    "replaceItem": "fn(newItem: string, index: number) -> string",
    "getItem": "fn(index: number) -> string",
    "clear": "fn()",
    "appendItem": "fn(newItem: string) -> string",
    "initialize": "fn(newItem: string) -> string",
    "removeItem": "fn(index: number) -> string",
    "insertItemBefore": "fn(newItem: string, index: number) -> string",
    "prototype": "SVGStringList"
  },
  "XDomainRequest": {
    "timeout": "number",
    "onerror": "fn(ev: ErrorEvent)",
    "onload": "fn(ev: Event)",
    "onprogress": "fn(ev: ProgressEvent)",
    "ontimeout": "fn(ev: Event)",
    "responseText": "string",
    "contentType": "string",
    "open": "fn(method: string, url: string)",
    "abort": "fn()",
    "send": "fn(data?: ?)",
    "addEventListener": "fn(type: string, listener: fn(ev: ErrorEvent), useCapture?: bool)",
    "prototype": "XDomainRequest",
    "create": "fn() -> XDomainRequest"
  },
  "DOML2DeprecatedBackgroundColorStyle": {
    "bgColor": "?"
  },
  "ElementTraversal": {
    "childElementCount": "number",
    "previousElementSibling": "Element",
    "lastElementChild": "Element",
    "nextElementSibling": "Element",
    "firstElementChild": "Element"
  },
  "SVGLength": {
    "valueAsString": "string",
    "valueInSpecifiedUnits": "number",
    "value": "number",
    "unitType": "number",
    "newValueSpecifiedUnits": "fn(unitType: number, valueInSpecifiedUnits: number)",
    "convertToSpecifiedUnits": "fn(unitType: number)",
    "SVG_LENGTHTYPE_NUMBER": "number",
    "SVG_LENGTHTYPE_CM": "number",
    "SVG_LENGTHTYPE_PC": "number",
    "SVG_LENGTHTYPE_PERCENTAGE": "number",
    "SVG_LENGTHTYPE_MM": "number",
    "SVG_LENGTHTYPE_PT": "number",
    "SVG_LENGTHTYPE_IN": "number",
    "SVG_LENGTHTYPE_EMS": "number",
    "SVG_LENGTHTYPE_PX": "number",
    "SVG_LENGTHTYPE_UNKNOWN": "number",
    "SVG_LENGTHTYPE_EXS": "number",
    "prototype": "SVGLength"
  },
  "SVGPolygonElement": {
    "prototype": "SVGPolygonElement"
  },
  "HTMLPhraseElement": {
    "dateTime": "string",
    "cite": "string",
    "prototype": "HTMLPhraseElement"
  },
  "NavigatorStorageUtils": {},
  "SVGPathSegCurvetoCubicRel": {
    "y": "number",
    "y1": "number",
    "x2": "number",
    "x": "number",
    "x1": "number",
    "y2": "number",
    "prototype": "SVGPathSegCurvetoCubicRel"
  },
  "SVGTextContentElement": {
    "textLength": "SVGAnimatedLength",
    "lengthAdjust": "SVGAnimatedEnumeration",
    "getCharNumAtPosition": "fn(point: SVGPoint) -> number",
    "getStartPositionOfChar": "fn(charnum: number) -> SVGPoint",
    "getExtentOfChar": "fn(charnum: number) -> SVGRect",
    "getComputedTextLength": "fn() -> number",
    "getSubStringLength": "fn(charnum: number, nchars: number) -> number",
    "selectSubString": "fn(charnum: number, nchars: number)",
    "getNumberOfChars": "fn() -> number",
    "getRotationOfChar": "fn(charnum: number) -> number",
    "getEndPositionOfChar": "fn(charnum: number) -> SVGPoint",
    "LENGTHADJUST_SPACING": "number",
    "LENGTHADJUST_SPACINGANDGLYPHS": "number",
    "LENGTHADJUST_UNKNOWN": "number",
    "prototype": "SVGTextContentElement"
  },
  "DOML2DeprecatedColorProperty": {
    "color": "string"
  },
  "Location": {
    "hash": "string",
    "protocol": "string",
    "search": "string",
    "href": "string",
    "hostname": "string",
    "port": "string",
    "pathname": "string",
    "host": "string",
    "reload": "fn(flag?: bool)",
    "replace": "fn(url: string)",
    "assign": "fn(url: string)",
    "prototype": "Location"
  },
  "HTMLTitleElement": {
    "text": "string",
    "prototype": "HTMLTitleElement"
  },
  "HTMLStyleElement": {
    "media": "string",
    "type": "string",
    "prototype": "HTMLStyleElement"
  },
  "PerformanceEntry": {
    "name": "string",
    "startTime": "number",
    "duration": "number",
    "entryType": "string",
    "prototype": "PerformanceEntry"
  },
  "SVGTransform": {
    "type": "number",
    "angle": "number",
    "matrix": "SVGMatrix",
    "setTranslate": "fn(tx: number, ty: number)",
    "setScale": "fn(sx: number, sy: number)",
    "setMatrix": "fn(matrix: SVGMatrix)",
    "setSkewY": "fn(angle: number)",
    "setRotate": "fn(angle: number, cx: number, cy: number)",
    "setSkewX": "fn(angle: number)",
    "SVG_TRANSFORM_SKEWX": "number",
    "SVG_TRANSFORM_UNKNOWN": "number",
    "SVG_TRANSFORM_SCALE": "number",
    "SVG_TRANSFORM_TRANSLATE": "number",
    "SVG_TRANSFORM_MATRIX": "number",
    "SVG_TRANSFORM_ROTATE": "number",
    "SVG_TRANSFORM_SKEWY": "number",
    "prototype": "SVGTransform"
  },
  "UIEvent": {
    "detail": "number",
    "view": "Window",
    "initUIEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number)",
    "prototype": "UIEvent"
  },
  "SVGURIReference": {
    "href": "SVGAnimatedString"
  },
  "SVGPathSeg": {
    "pathSegType": "number",
    "pathSegTypeAsLetter": "string",
    "PATHSEG_MOVETO_REL": "number",
    "PATHSEG_LINETO_VERTICAL_REL": "number",
    "PATHSEG_CURVETO_CUBIC_SMOOTH_ABS": "number",
    "PATHSEG_CURVETO_QUADRATIC_REL": "number",
    "PATHSEG_CURVETO_CUBIC_ABS": "number",
    "PATHSEG_LINETO_HORIZONTAL_ABS": "number",
    "PATHSEG_CURVETO_QUADRATIC_ABS": "number",
    "PATHSEG_LINETO_ABS": "number",
    "PATHSEG_CLOSEPATH": "number",
    "PATHSEG_LINETO_HORIZONTAL_REL": "number",
    "PATHSEG_CURVETO_CUBIC_SMOOTH_REL": "number",
    "PATHSEG_LINETO_REL": "number",
    "PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS": "number",
    "PATHSEG_ARC_REL": "number",
    "PATHSEG_CURVETO_CUBIC_REL": "number",
    "PATHSEG_UNKNOWN": "number",
    "PATHSEG_LINETO_VERTICAL_ABS": "number",
    "PATHSEG_ARC_ABS": "number",
    "PATHSEG_MOVETO_ABS": "number",
    "PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL": "number",
    "prototype": "SVGPathSeg"
  },
  "WheelEvent": {
    "deltaZ": "number",
    "deltaX": "number",
    "deltaMode": "number",
    "deltaY": "number",
    "initWheelEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number)",
    "getCurrentPoint": "fn(element: Element)",
    "DOM_DELTA_PIXEL": "number",
    "DOM_DELTA_LINE": "number",
    "DOM_DELTA_PAGE": "number",
    "prototype": "WheelEvent"
  },
  "MSEventAttachmentTarget": {
    "attachEvent": "fn(event: string, listener: EventListener) -> bool",
    "detachEvent": "fn(event: string, listener: EventListener)"
  },
  "SVGNumber": {
    "value": "number",
    "prototype": "SVGNumber"
  },
  "SVGPathElement": {
    "getPathSegAtLength": "fn(distance: number) -> number",
    "getPointAtLength": "fn(distance: number) -> SVGPoint",
    "createSVGPathSegCurvetoQuadraticAbs": "fn(x: number, y: number, x1: number, y1: number) -> SVGPathSegCurvetoQuadraticAbs",
    "createSVGPathSegLinetoRel": "fn(x: number, y: number) -> SVGPathSegLinetoRel",
    "createSVGPathSegCurvetoQuadraticRel": "fn(x: number, y: number, x1: number, y1: number) -> SVGPathSegCurvetoQuadraticRel",
    "createSVGPathSegCurvetoCubicAbs": "fn(x: number, y: number, x1: number, y1: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicAbs",
    "createSVGPathSegLinetoAbs": "fn(x: number, y: number) -> SVGPathSegLinetoAbs",
    "createSVGPathSegClosePath": "fn() -> SVGPathSegClosePath",
    "createSVGPathSegCurvetoCubicRel": "fn(x: number, y: number, x1: number, y1: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicRel",
    "createSVGPathSegCurvetoQuadraticSmoothRel": "fn(x: number, y: number) -> SVGPathSegCurvetoQuadraticSmoothRel",
    "createSVGPathSegMovetoRel": "fn(x: number, y: number) -> SVGPathSegMovetoRel",
    "createSVGPathSegCurvetoCubicSmoothAbs": "fn(x: number, y: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicSmoothAbs",
    "createSVGPathSegMovetoAbs": "fn(x: number, y: number) -> SVGPathSegMovetoAbs",
    "createSVGPathSegLinetoVerticalRel": "fn(y: number) -> SVGPathSegLinetoVerticalRel",
    "createSVGPathSegArcRel": "fn(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: bool, sweepFlag: bool) -> SVGPathSegArcRel",
    "createSVGPathSegCurvetoQuadraticSmoothAbs": "fn(x: number, y: number) -> SVGPathSegCurvetoQuadraticSmoothAbs",
    "createSVGPathSegLinetoHorizontalRel": "fn(x: number) -> SVGPathSegLinetoHorizontalRel",
    "getTotalLength": "fn() -> number",
    "createSVGPathSegCurvetoCubicSmoothRel": "fn(x: number, y: number, x2: number, y2: number) -> SVGPathSegCurvetoCubicSmoothRel",
    "createSVGPathSegLinetoHorizontalAbs": "fn(x: number) -> SVGPathSegLinetoHorizontalAbs",
    "createSVGPathSegLinetoVerticalAbs": "fn(y: number) -> SVGPathSegLinetoVerticalAbs",
    "createSVGPathSegArcAbs": "fn(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: bool, sweepFlag: bool) -> SVGPathSegArcAbs",
    "prototype": "SVGPathElement"
  },
  "MSCompatibleInfo": {
    "version": "string",
    "userAgent": "string",
    "prototype": "MSCompatibleInfo"
  },
  "Text": {
    "wholeText": "string",
    "splitText": "fn(offset: number) -> Text",
    "replaceWholeText": "fn(content: string) -> Text",
    "prototype": "Text"
  },
  "SVGAnimatedRect": {
    "animVal": "SVGRect",
    "baseVal": "SVGRect",
    "prototype": "SVGAnimatedRect"
  },
  "CSSNamespaceRule": {
    "namespaceURI": "string",
    "prefix": "string",
    "prototype": "CSSNamespaceRule"
  },
  "SVGPathSegList": {
    "numberOfItems": "number",
    "replaceItem": "fn(newItem: SVGPathSeg, index: number) -> SVGPathSeg",
    "getItem": "fn(index: number) -> SVGPathSeg",
    "clear": "fn()",
    "appendItem": "fn(newItem: SVGPathSeg) -> SVGPathSeg",
    "initialize": "fn(newItem: SVGPathSeg) -> SVGPathSeg",
    "removeItem": "fn(index: number) -> SVGPathSeg",
    "insertItemBefore": "fn(newItem: SVGPathSeg, index: number) -> SVGPathSeg",
    "prototype": "SVGPathSegList"
  },
  "HTMLUnknownElement": {
    "prototype": "HTMLUnknownElement"
  },
  "HTMLAudioElement": {
    "prototype": "HTMLAudioElement"
  },
  "MSImageResourceExtensions": {
    "dynsrc": "string",
    "vrml": "string",
    "lowsrc": "string",
    "start": "string",
    "loop": "number"
  },
  "PositionError": {
    "code": "number",
    "message": "string",
    "POSITION_UNAVAILABLE": "number",
    "PERMISSION_DENIED": "number",
    "TIMEOUT": "number",
    "prototype": "PositionError"
  },
  "HTMLTableCellElement": {
    "width": "number",
    "headers": "string",
    "cellIndex": "number",
    "align": "string",
    "borderColorLight": "?",
    "colSpan": "number",
    "borderColor": "?",
    "axis": "string",
    "height": "?",
    "noWrap": "bool",
    "abbr": "string",
    "rowSpan": "number",
    "scope": "string",
    "borderColorDark": "?",
    "prototype": "HTMLTableCellElement"
  },
  "SVGElementInstance": {
    "previousSibling": "SVGElementInstance",
    "parentNode": "SVGElementInstance",
    "lastChild": "SVGElementInstance",
    "nextSibling": "SVGElementInstance",
    "childNodes": "SVGElementInstanceList",
    "correspondingUseElement": "SVGUseElement",
    "correspondingElement": "SVGElement",
    "firstChild": "SVGElementInstance",
    "prototype": "SVGElementInstance"
  },
  "MSNamespaceInfoCollection": {
    "length": "number",
    "add": "fn(namespace?: string, urn?: string, implementationUrl?: ?) -> ?",
    "item": "fn(index: ?) -> ?",
    "prototype": "MSNamespaceInfoCollection"
  },
  "SVGCircleElement": {
    "cx": "SVGAnimatedLength",
    "r": "SVGAnimatedLength",
    "cy": "SVGAnimatedLength",
    "prototype": "SVGCircleElement"
  },
  "StyleSheetList": {
    "length": "number",
    "item": "fn(index?: number) -> StyleSheet",
    "prototype": "StyleSheetList"
  },
  "CSSImportRule": {
    "styleSheet": "CSSStyleSheet",
    "href": "string",
    "media": "MediaList",
    "prototype": "CSSImportRule"
  },
  "CustomEvent": {
    "detail": "?",
    "initCustomEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, detailArg: ?)",
    "prototype": "CustomEvent"
  },
  "HTMLBaseFontElement": {
    "face": "string",
    "size": "number",
    "prototype": "HTMLBaseFontElement"
  },
  "HTMLTextAreaElement": {
    "value": "string",
    "status": "?",
    "form": "HTMLFormElement",
    "name": "string",
    "selectionStart": "number",
    "rows": "number",
    "cols": "number",
    "readOnly": "bool",
    "wrap": "string",
    "selectionEnd": "number",
    "type": "string",
    "defaultValue": "string",
    "validationMessage": "string",
    "autofocus": "bool",
    "validity": "ValidityState",
    "required": "bool",
    "maxLength": "number",
    "willValidate": "bool",
    "placeholder": "string",
    "createTextRange": "fn() -> TextRange",
    "setSelectionRange": "fn(start: number, end: number)",
    "select": "fn()",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)",
    "prototype": "HTMLTextAreaElement"
  },
  "Geolocation": {
    "clearWatch": "fn(watchId: number)",
    "getCurrentPosition": "fn(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions)",
    "watchPosition": "fn(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions) -> number",
    "prototype": "Geolocation"
  },
  "DOML2DeprecatedMarginStyle": {
    "vspace": "number",
    "hspace": "number"
  },
  "MSWindowModeless": {
    "dialogTop": "?",
    "dialogLeft": "?",
    "dialogWidth": "?",
    "dialogHeight": "?",
    "menuArguments": "?"
  },
  "DOML2DeprecatedAlignmentStyle": {
    "align": "string"
  },
  "HTMLMarqueeElement": {
    "width": "string",
    "onbounce": "fn(ev: Event)",
    "vspace": "number",
    "trueSpeed": "bool",
    "scrollAmount": "number",
    "scrollDelay": "number",
    "behavior": "string",
    "height": "string",
    "loop": "number",
    "direction": "string",
    "hspace": "number",
    "onstart": "fn(ev: Event)",
    "onfinish": "fn(ev: Event)",
    "stop": "fn()",
    "start": "fn()",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "HTMLMarqueeElement"
  },
  "SVGRect": {
    "y": "number",
    "width": "number",
    "x": "number",
    "height": "number",
    "prototype": "SVGRect"
  },
  "MSNodeExtensions": {
    "swapNode": "fn(otherNode: Node) -> Node",
    "removeNode": "fn(deep?: bool) -> Node",
    "replaceNode": "fn(replacement: Node) -> Node"
  },
  "History": {
    "length": "number",
    "state": "?",
    "back": "fn(distance?: ?)",
    "forward": "fn(distance?: ?)",
    "go": "fn(delta?: ?)",
    "replaceState": "fn(statedata: ?, title: string, url?: string)",
    "pushState": "fn(statedata: ?, title: string, url?: string)",
    "prototype": "History"
  },
  "SVGPathSegCurvetoCubicAbs": {
    "y": "number",
    "y1": "number",
    "x2": "number",
    "x": "number",
    "x1": "number",
    "y2": "number",
    "prototype": "SVGPathSegCurvetoCubicAbs"
  },
  "SVGPathSegCurvetoQuadraticAbs": {
    "y": "number",
    "y1": "number",
    "x": "number",
    "x1": "number",
    "prototype": "SVGPathSegCurvetoQuadraticAbs"
  },
  "TimeRanges": {
    "length": "number",
    "start": "fn(index: number) -> number",
    "end": "fn(index: number) -> number",
    "prototype": "TimeRanges"
  },
  "CSSRule": {
    "cssText": "string",
    "parentStyleSheet": "CSSStyleSheet",
    "parentRule": "CSSRule",
    "type": "number",
    "IMPORT_RULE": "number",
    "MEDIA_RULE": "number",
    "STYLE_RULE": "number",
    "NAMESPACE_RULE": "number",
    "PAGE_RULE": "number",
    "UNKNOWN_RULE": "number",
    "FONT_FACE_RULE": "number",
    "CHARSET_RULE": "number",
    "KEYFRAMES_RULE": "number",
    "KEYFRAME_RULE": "number",
    "VIEWPORT_RULE": "number",
    "prototype": "CSSRule"
  },
  "SVGPathSegLinetoAbs": {
    "y": "number",
    "x": "number",
    "prototype": "SVGPathSegLinetoAbs"
  },
  "HTMLModElement": {
    "dateTime": "string",
    "cite": "string",
    "prototype": "HTMLModElement"
  },
  "SVGMatrix": {
    "e": "number",
    "c": "number",
    "a": "number",
    "b": "number",
    "d": "number",
    "f": "number",
    "multiply": "fn(secondMatrix: SVGMatrix) -> SVGMatrix",
    "flipY": "fn() -> SVGMatrix",
    "skewY": "fn(angle: number) -> SVGMatrix",
    "inverse": "fn() -> SVGMatrix",
    "scaleNonUniform": "fn(scaleFactorX: number, scaleFactorY: number) -> SVGMatrix",
    "rotate": "fn(angle: number) -> SVGMatrix",
    "flipX": "fn() -> SVGMatrix",
    "translate": "fn(x: number, y: number) -> SVGMatrix",
    "scale": "fn(scaleFactor: number) -> SVGMatrix",
    "rotateFromVector": "fn(x: number, y: number) -> SVGMatrix",
    "skewX": "fn(angle: number) -> SVGMatrix",
    "prototype": "SVGMatrix"
  },
  "MSPopupWindow": {
    "document": "Document",
    "isOpen": "bool",
    "show": "fn(x: number, y: number, w: number, h: number, element?: ?)",
    "hide": "fn()",
    "prototype": "MSPopupWindow"
  },
  "BeforeUnloadEvent": {
    "returnValue": "string",
    "prototype": "BeforeUnloadEvent"
  },
  "SVGUseElement": {
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "animatedInstanceRoot": "SVGElementInstance",
    "instanceRoot": "SVGElementInstance",
    "x": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "prototype": "SVGUseElement"
  },
  "Event": {
    "timeStamp": "number",
    "defaultPrevented": "bool",
    "isTrusted": "bool",
    "currentTarget": "EventTarget",
    "cancelBubble": "bool",
    "target": "EventTarget",
    "eventPhase": "number",
    "cancelable": "bool",
    "type": "string",
    "srcElement": "Element",
    "bubbles": "bool",
    "initEvent": "fn(eventTypeArg: string, canBubbleArg: bool, cancelableArg: bool)",
    "stopPropagation": "fn()",
    "stopImmediatePropagation": "fn()",
    "preventDefault": "fn()",
    "CAPTURING_PHASE": "number",
    "AT_TARGET": "number",
    "BUBBLING_PHASE": "number",
    "prototype": "Event"
  },
  "ImageData": {
    "width": "number",
    "data": "[number]",
    "height": "number",
    "prototype": "ImageData"
  },
  "HTMLTableColElement": {
    "width": "?",
    "align": "string",
    "span": "number",
    "prototype": "HTMLTableColElement"
  },
  "SVGException": {
    "code": "number",
    "message": "string",
    "name": "string",
    "SVG_MATRIX_NOT_INVERTABLE": "number",
    "SVG_WRONG_TYPE_ERR": "number",
    "SVG_INVALID_VALUE_ERR": "number",
    "prototype": "SVGException"
  },
  "SVGLinearGradientElement": {
    "y1": "SVGAnimatedLength",
    "x2": "SVGAnimatedLength",
    "x1": "SVGAnimatedLength",
    "y2": "SVGAnimatedLength",
    "prototype": "SVGLinearGradientElement"
  },
  "HTMLTableAlignment": {
    "ch": "string",
    "vAlign": "string",
    "chOff": "string"
  },
  "SVGAnimatedEnumeration": {
    "animVal": "number",
    "baseVal": "number",
    "prototype": "SVGAnimatedEnumeration"
  },
  "DOML2DeprecatedSizeProperty": {
    "size": "number"
  },
  "HTMLUListElement": {
    "prototype": "HTMLUListElement"
  },
  "SVGRectElement": {
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "ry": "SVGAnimatedLength",
    "rx": "SVGAnimatedLength",
    "x": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "prototype": "SVGRectElement"
  },
  "ErrorEventHandler": {},
  "HTMLDivElement": {
    "align": "string",
    "noWrap": "bool",
    "prototype": "HTMLDivElement"
  },
  "DOML2DeprecatedBorderStyle": {
    "border": "string"
  },
  "NamedNodeMap": {
    "length": "number",
    "removeNamedItemNS": "fn(namespaceURI: string, localName: string) -> Attr",
    "item": "fn(index: number) -> Attr",
    "removeNamedItem": "fn(name: string) -> Attr",
    "getNamedItem": "fn(name: string) -> Attr",
    "setNamedItem": "fn(arg: Attr) -> Attr",
    "getNamedItemNS": "fn(namespaceURI: string, localName: string) -> Attr",
    "setNamedItemNS": "fn(arg: Attr) -> Attr",
    "prototype": "NamedNodeMap"
  },
  "MediaList": {
    "length": "number",
    "mediaText": "string",
    "deleteMedium": "fn(oldMedium: string)",
    "appendMedium": "fn(newMedium: string)",
    "item": "fn(index: number) -> string",
    "prototype": "MediaList"
  },
  "SVGPathSegCurvetoQuadraticSmoothAbs": {
    "y": "number",
    "x": "number",
    "prototype": "SVGPathSegCurvetoQuadraticSmoothAbs"
  },
  "SVGPathSegCurvetoCubicSmoothRel": {
    "y": "number",
    "x2": "number",
    "x": "number",
    "y2": "number",
    "prototype": "SVGPathSegCurvetoCubicSmoothRel"
  },
  "SVGLengthList": {
    "numberOfItems": "number",
    "replaceItem": "fn(newItem: SVGLength, index: number) -> SVGLength",
    "getItem": "fn(index: number) -> SVGLength",
    "clear": "fn()",
    "appendItem": "fn(newItem: SVGLength) -> SVGLength",
    "initialize": "fn(newItem: SVGLength) -> SVGLength",
    "removeItem": "fn(index: number) -> SVGLength",
    "insertItemBefore": "fn(newItem: SVGLength, index: number) -> SVGLength",
    "prototype": "SVGLengthList"
  },
  "ProcessingInstruction": {
    "target": "string",
    "data": "string",
    "prototype": "ProcessingInstruction"
  },
  "MSWindowExtensions": {
    "status": "string",
    "onmouseleave": "fn(ev: MouseEvent)",
    "screenLeft": "number",
    "offscreenBuffering": "?",
    "maxConnectionsPerServer": "number",
    "onmouseenter": "fn(ev: MouseEvent)",
    "clipboardData": "DataTransfer",
    "defaultStatus": "string",
    "clientInformation": "Navigator",
    "closed": "bool",
    "onhelp": "fn(ev: Event)",
    "external": "External",
    "event": "MSEventObj",
    "onfocusout": "fn(ev: FocusEvent)",
    "screenTop": "number",
    "onfocusin": "fn(ev: FocusEvent)",
    "showModelessDialog": "fn(url?: string, argument?: ?, options?: ?) -> Window",
    "navigate": "fn(url: string)",
    "resizeBy": "fn(x?: number, y?: number)",
    "item": "fn(index: ?) -> ?",
    "resizeTo": "fn(x?: number, y?: number)",
    "createPopup": "fn(arguments?: ?) -> MSPopupWindow",
    "toStaticHTML": "fn(html: string) -> string",
    "execScript": "fn(code: string, language?: string) -> ?",
    "msWriteProfilerMark": "fn(profilerMarkName: string)",
    "moveTo": "fn(x?: number, y?: number)",
    "moveBy": "fn(x?: number, y?: number)",
    "showHelp": "fn(url: string, helpArg?: ?, features?: string)",
    "captureEvents": "fn()",
    "releaseEvents": "fn()",
    "addEventListener": "fn(type: string, listener: fn(ev: MouseEvent), useCapture?: bool)"
  },
  "MSBehaviorUrnsCollection": {
    "length": "number",
    "item": "fn(index: number) -> string",
    "prototype": "MSBehaviorUrnsCollection"
  },
  "CSSFontFaceRule": {
    "style": "CSSStyleDeclaration",
    "prototype": "CSSFontFaceRule"
  },
  "DOML2DeprecatedBackgroundStyle": {
    "background": "string"
  },
  "TextEvent": {
    "inputMethod": "number",
    "data": "string",
    "locale": "string",
    "initTextEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, dataArg: string, inputMethod: number, locale: string)",
    "DOM_INPUT_METHOD_KEYBOARD": "number",
    "DOM_INPUT_METHOD_DROP": "number",
    "DOM_INPUT_METHOD_IME": "number",
    "DOM_INPUT_METHOD_SCRIPT": "number",
    "DOM_INPUT_METHOD_VOICE": "number",
    "DOM_INPUT_METHOD_UNKNOWN": "number",
    "DOM_INPUT_METHOD_PASTE": "number",
    "DOM_INPUT_METHOD_HANDWRITING": "number",
    "DOM_INPUT_METHOD_OPTION": "number",
    "DOM_INPUT_METHOD_MULTIMODAL": "number",
    "prototype": "TextEvent"
  },
  "DocumentFragment": {
    "prototype": "DocumentFragment"
  },
  "SVGPolylineElement": {
    "prototype": "SVGPolylineElement"
  },
  "SVGAnimatedPathData": {
    "pathSegList": "SVGPathSegList"
  },
  "Position": {
    "timestamp": "Date",
    "coords": "Coordinates",
    "prototype": "Position"
  },
  "BookmarkCollection": {
    "length": "number",
    "item": "fn(index: number) -> ?",
    "prototype": "BookmarkCollection"
  },
  "PerformanceMark": {
    "prototype": "PerformanceMark"
  },
  "CSSPageRule": {
    "pseudoClass": "string",
    "selectorText": "string",
    "selector": "string",
    "style": "CSSStyleDeclaration",
    "prototype": "CSSPageRule"
  },
  "HTMLBRElement": {
    "clear": "string",
    "prototype": "HTMLBRElement"
  },
  "MSNavigatorExtensions": {
    "userLanguage": "string",
    "plugins": "MSPluginsCollection",
    "cookieEnabled": "bool",
    "appCodeName": "string",
    "cpuClass": "string",
    "appMinorVersion": "string",
    "connectionSpeed": "number",
    "browserLanguage": "string",
    "mimeTypes": "MSMimeTypesCollection",
    "systemLanguage": "string",
    "language": "string",
    "javaEnabled": "fn() -> bool",
    "taintEnabled": "fn() -> bool"
  },
  "HTMLSpanElement": {
    "prototype": "HTMLSpanElement"
  },
  "HTMLHeadElement": {
    "profile": "string",
    "prototype": "HTMLHeadElement"
  },
  "HTMLHeadingElement": {
    "align": "string",
    "prototype": "HTMLHeadingElement"
  },
  "HTMLFormElement": {
    "length": "number",
    "target": "string",
    "acceptCharset": "string",
    "enctype": "string",
    "elements": "HTMLCollection",
    "action": "string",
    "name": "string",
    "method": "string",
    "encoding": "string",
    "autocomplete": "string",
    "noValidate": "bool",
    "reset": "fn()",
    "item": "fn(name?: ?, index?: ?) -> ?",
    "submit": "fn()",
    "namedItem": "fn(name: string) -> ?",
    "checkValidity": "fn() -> bool",
    "prototype": "HTMLFormElement"
  },
  "SVGZoomAndPan": {
    "zoomAndPan": "number",
    "SVG_ZOOMANDPAN_MAGNIFY": "number",
    "SVG_ZOOMANDPAN_UNKNOWN": "number",
    "SVG_ZOOMANDPAN_DISABLE": "number",
    "!type": "SVGZoomAndPan"
  },
  "HTMLMediaElement": {
    "initialTime": "number",
    "played": "TimeRanges",
    "currentSrc": "string",
    "readyState": "?",
    "autobuffer": "bool",
    "loop": "bool",
    "ended": "bool",
    "buffered": "TimeRanges",
    "error": "MediaError",
    "seekable": "TimeRanges",
    "autoplay": "bool",
    "controls": "bool",
    "volume": "number",
    "src": "string",
    "playbackRate": "number",
    "duration": "number",
    "muted": "bool",
    "defaultPlaybackRate": "number",
    "paused": "bool",
    "seeking": "bool",
    "currentTime": "number",
    "preload": "string",
    "networkState": "number",
    "msAudioCategory": "string",
    "msRealTime": "bool",
    "msPlayToPrimary": "bool",
    "textTracks": "TextTrackList",
    "msPlayToDisabled": "bool",
    "audioTracks": "AudioTrackList",
    "msPlayToSource": "?",
    "msAudioDeviceType": "string",
    "msPlayToPreferredSourceUri": "string",
    "onmsneedkey": "fn(ev: MSMediaKeyNeededEvent)",
    "msKeys": "MSMediaKeys",
    "msGraphicsTrustStatus": "MSGraphicsTrust",
    "pause": "fn()",
    "play": "fn()",
    "load": "fn()",
    "canPlayType": "fn(type: string) -> string",
    "msClearEffects": "fn()",
    "msSetMediaProtectionManager": "fn(mediaProtectionManager?: ?)",
    "msInsertAudioEffect": "fn(activatableClassId: string, effectRequired: bool, config?: ?)",
    "msSetMediaKeys": "fn(mediaKeys: MSMediaKeys)",
    "addTextTrack": "fn(kind: string, label?: string, language?: string) -> TextTrack",
    "HAVE_METADATA": "number",
    "HAVE_CURRENT_DATA": "number",
    "HAVE_NOTHING": "number",
    "NETWORK_NO_SOURCE": "number",
    "HAVE_ENOUGH_DATA": "number",
    "NETWORK_EMPTY": "number",
    "NETWORK_LOADING": "number",
    "NETWORK_IDLE": "number",
    "HAVE_FUTURE_DATA": "number",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "HTMLMediaElement"
  },
  "ElementCSSInlineStyle": {
    "runtimeStyle": "MSStyleCSSProperties",
    "currentStyle": "MSCurrentStyleCSSProperties",
    "doScroll": "fn(component?: ?)",
    "componentFromPoint": "fn(x: number, y: number) -> string"
  },
  "DOMParser": {
    "parseFromString": "fn(source: string, mimeType: string) -> Document",
    "prototype": "DOMParser"
  },
  "MSMimeTypesCollection": {
    "length": "number",
    "prototype": "MSMimeTypesCollection"
  },
  "StyleSheet": {
    "disabled": "bool",
    "ownerNode": "Node",
    "parentStyleSheet": "StyleSheet",
    "href": "string",
    "media": "MediaList",
    "type": "string",
    "title": "string",
    "prototype": "StyleSheet"
  },
  "SVGTextPathElement": {
    "startOffset": "SVGAnimatedLength",
    "method": "SVGAnimatedEnumeration",
    "spacing": "SVGAnimatedEnumeration",
    "TEXTPATH_SPACINGTYPE_EXACT": "number",
    "TEXTPATH_METHODTYPE_STRETCH": "number",
    "TEXTPATH_SPACINGTYPE_AUTO": "number",
    "TEXTPATH_SPACINGTYPE_UNKNOWN": "number",
    "TEXTPATH_METHODTYPE_UNKNOWN": "number",
    "TEXTPATH_METHODTYPE_ALIGN": "number",
    "prototype": "SVGTextPathElement"
  },
  "HTMLDTElement": {
    "noWrap": "bool",
    "prototype": "HTMLDTElement"
  },
  "NodeList": {
    "length": "number",
    "item": "fn(index: number) -> Node",
    "prototype": "NodeList"
  },
  "XMLSerializer": {
    "serializeToString": "fn(target: Node) -> string",
    "prototype": "XMLSerializer"
  },
  "PerformanceMeasure": {
    "prototype": "PerformanceMeasure"
  },
  "SVGGradientElement": {
    "spreadMethod": "SVGAnimatedEnumeration",
    "gradientTransform": "SVGAnimatedTransformList",
    "gradientUnits": "SVGAnimatedEnumeration",
    "SVG_SPREADMETHOD_REFLECT": "number",
    "SVG_SPREADMETHOD_PAD": "number",
    "SVG_SPREADMETHOD_UNKNOWN": "number",
    "SVG_SPREADMETHOD_REPEAT": "number",
    "prototype": "SVGGradientElement"
  },
  "NodeFilter": {
    "acceptNode": "fn(n: Node) -> number",
    "SHOW_ENTITY_REFERENCE": "number",
    "SHOW_NOTATION": "number",
    "SHOW_ENTITY": "number",
    "SHOW_DOCUMENT": "number",
    "SHOW_PROCESSING_INSTRUCTION": "number",
    "FILTER_REJECT": "number",
    "SHOW_CDATA_SECTION": "number",
    "FILTER_ACCEPT": "number",
    "SHOW_ALL": "number",
    "SHOW_DOCUMENT_TYPE": "number",
    "SHOW_TEXT": "number",
    "SHOW_ELEMENT": "number",
    "SHOW_COMMENT": "number",
    "FILTER_SKIP": "number",
    "SHOW_ATTRIBUTE": "number",
    "SHOW_DOCUMENT_FRAGMENT": "number",
    "!type": "NodeFilter"
  },
  "SVGNumberList": {
    "numberOfItems": "number",
    "replaceItem": "fn(newItem: SVGNumber, index: number) -> SVGNumber",
    "getItem": "fn(index: number) -> SVGNumber",
    "clear": "fn()",
    "appendItem": "fn(newItem: SVGNumber) -> SVGNumber",
    "initialize": "fn(newItem: SVGNumber) -> SVGNumber",
    "removeItem": "fn(index: number) -> SVGNumber",
    "insertItemBefore": "fn(newItem: SVGNumber, index: number) -> SVGNumber",
    "prototype": "SVGNumberList"
  },
  "MediaError": {
    "code": "number",
    "msExtendedCode": "number",
    "MEDIA_ERR_ABORTED": "number",
    "MEDIA_ERR_NETWORK": "number",
    "MEDIA_ERR_SRC_NOT_SUPPORTED": "number",
    "MEDIA_ERR_DECODE": "number",
    "MS_MEDIA_ERR_ENCRYPTED": "number",
    "prototype": "MediaError"
  },
  "HTMLFieldSetElement": {
    "align": "string",
    "form": "HTMLFormElement",
    "validationMessage": "string",
    "validity": "ValidityState",
    "willValidate": "bool",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)",
    "prototype": "HTMLFieldSetElement"
  },
  "HTMLBGSoundElement": {
    "balance": "?",
    "volume": "?",
    "src": "string",
    "loop": "number",
    "prototype": "HTMLBGSoundElement"
  },
  "Comment": {
    "text": "string",
    "prototype": "Comment"
  },
  "PerformanceResourceTiming": {
    "redirectStart": "number",
    "redirectEnd": "number",
    "domainLookupEnd": "number",
    "responseStart": "number",
    "domainLookupStart": "number",
    "fetchStart": "number",
    "requestStart": "number",
    "connectEnd": "number",
    "connectStart": "number",
    "initiatorType": "string",
    "responseEnd": "number",
    "prototype": "PerformanceResourceTiming"
  },
  "CanvasPattern": {
    "prototype": "CanvasPattern"
  },
  "HTMLHRElement": {
    "width": "number",
    "align": "string",
    "noShade": "bool",
    "prototype": "HTMLHRElement"
  },
  "HTMLObjectElement": {
    "width": "string",
    "codeType": "string",
    "object": "?",
    "form": "HTMLFormElement",
    "code": "string",
    "archive": "string",
    "standby": "string",
    "alt": "string",
    "classid": "string",
    "name": "string",
    "useMap": "string",
    "data": "string",
    "height": "string",
    "contentDocument": "Document",
    "altHtml": "string",
    "codeBase": "string",
    "declare": "bool",
    "type": "string",
    "BaseHref": "string",
    "validationMessage": "string",
    "validity": "ValidityState",
    "willValidate": "bool",
    "msPlayToPreferredSourceUri": "string",
    "msPlayToPrimary": "bool",
    "msPlayToDisabled": "bool",
    "readyState": "number",
    "msPlayToSource": "?",
    "checkValidity": "fn() -> bool",
    "setCustomValidity": "fn(error: string)",
    "prototype": "HTMLObjectElement"
  },
  "HTMLEmbedElement": {
    "width": "string",
    "palette": "string",
    "src": "string",
    "name": "string",
    "hidden": "string",
    "pluginspage": "string",
    "height": "string",
    "units": "string",
    "msPlayToPreferredSourceUri": "string",
    "msPlayToPrimary": "bool",
    "msPlayToDisabled": "bool",
    "readyState": "string",
    "msPlayToSource": "?",
    "prototype": "HTMLEmbedElement"
  },
  "StorageEvent": {
    "oldValue": "?",
    "newValue": "?",
    "url": "string",
    "storageArea": "Storage",
    "key": "string",
    "initStorageEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, keyArg: string, oldValueArg: ?, newValueArg: ?, urlArg: string, storageAreaArg: Storage)",
    "prototype": "StorageEvent"
  },
  "CharacterData": {
    "length": "number",
    "data": "string",
    "deleteData": "fn(offset: number, count: number)",
    "replaceData": "fn(offset: number, count: number, arg: string)",
    "appendData": "fn(arg: string)",
    "insertData": "fn(offset: number, arg: string)",
    "substringData": "fn(offset: number, count: number) -> string",
    "prototype": "CharacterData"
  },
  "HTMLOptGroupElement": {
    "index": "number",
    "defaultSelected": "bool",
    "text": "string",
    "value": "string",
    "form": "HTMLFormElement",
    "label": "string",
    "selected": "bool",
    "prototype": "HTMLOptGroupElement"
  },
  "HTMLIsIndexElement": {
    "form": "HTMLFormElement",
    "action": "string",
    "prompt": "string",
    "prototype": "HTMLIsIndexElement"
  },
  "SVGPathSegLinetoRel": {
    "y": "number",
    "x": "number",
    "prototype": "SVGPathSegLinetoRel"
  },
  "DOMException": {
    "code": "number",
    "message": "string",
    "name": "string",
    "HIERARCHY_REQUEST_ERR": "number",
    "NO_MODIFICATION_ALLOWED_ERR": "number",
    "INVALID_MODIFICATION_ERR": "number",
    "NAMESPACE_ERR": "number",
    "INVALID_CHARACTER_ERR": "number",
    "TYPE_MISMATCH_ERR": "number",
    "ABORT_ERR": "number",
    "INVALID_STATE_ERR": "number",
    "SECURITY_ERR": "number",
    "NETWORK_ERR": "number",
    "WRONG_DOCUMENT_ERR": "number",
    "QUOTA_EXCEEDED_ERR": "number",
    "INDEX_SIZE_ERR": "number",
    "DOMSTRING_SIZE_ERR": "number",
    "SYNTAX_ERR": "number",
    "SERIALIZE_ERR": "number",
    "VALIDATION_ERR": "number",
    "NOT_FOUND_ERR": "number",
    "URL_MISMATCH_ERR": "number",
    "PARSE_ERR": "number",
    "NO_DATA_ALLOWED_ERR": "number",
    "NOT_SUPPORTED_ERR": "number",
    "INVALID_ACCESS_ERR": "number",
    "INUSE_ATTRIBUTE_ERR": "number",
    "INVALID_NODE_TYPE_ERR": "number",
    "DATA_CLONE_ERR": "number",
    "TIMEOUT_ERR": "number",
    "prototype": "DOMException"
  },
  "SVGAnimatedBoolean": {
    "animVal": "bool",
    "baseVal": "bool",
    "prototype": "SVGAnimatedBoolean"
  },
  "MSCompatibleInfoCollection": {
    "length": "number",
    "item": "fn(index: number) -> MSCompatibleInfo",
    "prototype": "MSCompatibleInfoCollection"
  },
  "SVGSwitchElement": {
    "prototype": "SVGSwitchElement"
  },
  "SVGPreserveAspectRatio": {
    "align": "number",
    "meetOrSlice": "number",
    "SVG_PRESERVEASPECTRATIO_NONE": "number",
    "SVG_PRESERVEASPECTRATIO_XMINYMID": "number",
    "SVG_PRESERVEASPECTRATIO_XMAXYMIN": "number",
    "SVG_PRESERVEASPECTRATIO_XMINYMAX": "number",
    "SVG_PRESERVEASPECTRATIO_XMAXYMAX": "number",
    "SVG_MEETORSLICE_UNKNOWN": "number",
    "SVG_PRESERVEASPECTRATIO_XMAXYMID": "number",
    "SVG_PRESERVEASPECTRATIO_XMIDYMAX": "number",
    "SVG_PRESERVEASPECTRATIO_XMINYMIN": "number",
    "SVG_MEETORSLICE_MEET": "number",
    "SVG_PRESERVEASPECTRATIO_XMIDYMID": "number",
    "SVG_PRESERVEASPECTRATIO_XMIDYMIN": "number",
    "SVG_MEETORSLICE_SLICE": "number",
    "SVG_PRESERVEASPECTRATIO_UNKNOWN": "number",
    "prototype": "SVGPreserveAspectRatio"
  },
  "Attr": {
    "expando": "bool",
    "specified": "bool",
    "ownerElement": "Element",
    "value": "string",
    "name": "string",
    "prototype": "Attr"
  },
  "PerformanceNavigation": {
    "redirectCount": "number",
    "type": "number",
    "toJSON": "fn() -> ?",
    "TYPE_RELOAD": "number",
    "TYPE_RESERVED": "number",
    "TYPE_BACK_FORWARD": "number",
    "TYPE_NAVIGATE": "number",
    "prototype": "PerformanceNavigation"
  },
  "SVGStopElement": {
    "offset": "SVGAnimatedNumber",
    "prototype": "SVGStopElement"
  },
  "PositionCallback": {},
  "SVGSymbolElement": {
    "prototype": "SVGSymbolElement"
  },
  "SVGElementInstanceList": {
    "length": "number",
    "item": "fn(index: number) -> SVGElementInstance",
    "prototype": "SVGElementInstanceList"
  },
  "CSSRuleList": {
    "length": "number",
    "item": "fn(index: number) -> CSSRule",
    "prototype": "CSSRuleList"
  },
  "MSDataBindingRecordSetExtensions": {
    "recordset": "?",
    "namedRecordset": "fn(dataMember: string, hierarchy?: ?) -> ?"
  },
  "LinkStyle": {
    "styleSheet": "StyleSheet",
    "sheet": "StyleSheet"
  },
  "HTMLVideoElement": {
    "width": "number",
    "videoWidth": "number",
    "videoHeight": "number",
    "height": "number",
    "poster": "string",
    "msIsStereo3D": "bool",
    "msStereo3DPackingMode": "string",
    "onMSVideoOptimalLayoutChanged": "fn(ev: ?)",
    "onMSVideoFrameStepCompleted": "fn(ev: ?)",
    "msStereo3DRenderMode": "string",
    "msIsLayoutOptimalForPlayback": "bool",
    "msHorizontalMirror": "bool",
    "onMSVideoFormatChanged": "fn(ev: ?)",
    "msZoom": "bool",
    "msInsertVideoEffect": "fn(activatableClassId: string, effectRequired: bool, config?: ?)",
    "msSetVideoRectangle": "fn(left: number, top: number, right: number, bottom: number)",
    "msFrameStep": "fn(forward: bool)",
    "getVideoPlaybackQuality": "fn() -> VideoPlaybackQuality",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)",
    "prototype": "HTMLVideoElement"
  },
  "ClientRectList": {
    "length": "number",
    "item": "fn(index: number) -> ClientRect",
    "prototype": "ClientRectList"
  },
  "SVGMaskElement": {
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "maskUnits": "SVGAnimatedEnumeration",
    "maskContentUnits": "SVGAnimatedEnumeration",
    "x": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "prototype": "SVGMaskElement"
  },
  "External": {
    "prototype": "External"
  },
  "MSGestureEvent": {
    "offsetY": "number",
    "translationY": "number",
    "velocityExpansion": "number",
    "velocityY": "number",
    "velocityAngular": "number",
    "translationX": "number",
    "velocityX": "number",
    "hwTimestamp": "number",
    "offsetX": "number",
    "screenX": "number",
    "rotation": "number",
    "expansion": "number",
    "clientY": "number",
    "screenY": "number",
    "scale": "number",
    "gestureObject": "?",
    "clientX": "number",
    "initGestureEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number)",
    "MSGESTURE_FLAG_BEGIN": "number",
    "MSGESTURE_FLAG_END": "number",
    "MSGESTURE_FLAG_CANCEL": "number",
    "MSGESTURE_FLAG_INERTIA": "number",
    "MSGESTURE_FLAG_NONE": "number",
    "prototype": "MSGestureEvent"
  },
  "ErrorEvent": {
    "colno": "number",
    "filename": "string",
    "error": "?",
    "lineno": "number",
    "message": "string",
    "initErrorEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, messageArg: string, filenameArg: string, linenoArg: number)",
    "prototype": "ErrorEvent"
  },
  "SVGFilterElement": {
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "filterResX": "SVGAnimatedInteger",
    "filterUnits": "SVGAnimatedEnumeration",
    "primitiveUnits": "SVGAnimatedEnumeration",
    "x": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "filterResY": "SVGAnimatedInteger",
    "setFilterRes": "fn(filterResX: number, filterResY: number)",
    "prototype": "SVGFilterElement"
  },
  "TrackEvent": {
    "track": "?",
    "prototype": "TrackEvent"
  },
  "SVGFEMergeNodeElement": {
    "in1": "SVGAnimatedString",
    "prototype": "SVGFEMergeNodeElement"
  },
  "SVGFEFloodElement": {
    "prototype": "SVGFEFloodElement"
  },
  "MSGesture": {
    "target": "Element",
    "addPointer": "fn(pointerId: number)",
    "stop": "fn()",
    "prototype": "MSGesture"
  },
  "TextTrackCue": {
    "onenter": "fn(ev: Event)",
    "track": "TextTrack",
    "endTime": "number",
    "text": "string",
    "pauseOnExit": "bool",
    "id": "string",
    "startTime": "number",
    "onexit": "fn(ev: Event)",
    "getCueAsHTML": "fn() -> DocumentFragment",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "TextTrackCue"
  },
  "MSStreamReader": {
    "error": "DOMError",
    "readAsArrayBuffer": "fn(stream: MSStream, size?: number)",
    "readAsBlob": "fn(stream: MSStream, size?: number)",
    "readAsDataURL": "fn(stream: MSStream, size?: number)",
    "readAsText": "fn(stream: MSStream, encoding?: string, size?: number)",
    "prototype": "MSStreamReader"
  },
  "DOMTokenList": {
    "length": "number",
    "contains": "fn(token: string) -> bool",
    "remove": "fn(token: string)",
    "toggle": "fn(token: string) -> bool",
    "add": "fn(token: string)",
    "item": "fn(index: number) -> string",
    "prototype": "DOMTokenList"
  },
  "SVGFEFuncAElement": {
    "prototype": "SVGFEFuncAElement"
  },
  "SVGFETileElement": {
    "in1": "SVGAnimatedString",
    "prototype": "SVGFETileElement"
  },
  "SVGFEBlendElement": {
    "in2": "SVGAnimatedString",
    "mode": "SVGAnimatedEnumeration",
    "in1": "SVGAnimatedString",
    "SVG_FEBLEND_MODE_DARKEN": "number",
    "SVG_FEBLEND_MODE_UNKNOWN": "number",
    "SVG_FEBLEND_MODE_MULTIPLY": "number",
    "SVG_FEBLEND_MODE_NORMAL": "number",
    "SVG_FEBLEND_MODE_SCREEN": "number",
    "SVG_FEBLEND_MODE_LIGHTEN": "number",
    "prototype": "SVGFEBlendElement"
  },
  "MessageChannel": {
    "port2": "MessagePort",
    "port1": "MessagePort",
    "prototype": "MessageChannel"
  },
  "SVGFEMergeElement": {
    "prototype": "SVGFEMergeElement"
  },
  "TransitionEvent": {
    "propertyName": "string",
    "elapsedTime": "number",
    "initTransitionEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, propertyNameArg: string, elapsedTimeArg: number)",
    "prototype": "TransitionEvent"
  },
  "MediaQueryList": {
    "matches": "bool",
    "media": "string",
    "addListener": "fn(listener: MediaQueryListListener)",
    "removeListener": "fn(listener: MediaQueryListListener)",
    "prototype": "MediaQueryList"
  },
  "DOMError": {
    "name": "string",
    "prototype": "DOMError"
  },
  "CloseEvent": {
    "wasClean": "bool",
    "reason": "string",
    "code": "number",
    "initCloseEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, wasCleanArg: bool, codeArg: number, reasonArg: string)",
    "prototype": "CloseEvent"
  },
  "WebSocket": {
    "protocol": "string",
    "readyState": "number",
    "bufferedAmount": "number",
    "onopen": "fn(ev: Event)",
    "extensions": "string",
    "onmessage": "fn(ev: MessageEvent)",
    "onclose": "fn(ev: CloseEvent)",
    "onerror": "fn(ev: ErrorEvent)",
    "binaryType": "string",
    "url": "string",
    "close": "fn(code?: number, reason?: string)",
    "send": "fn(data: ?)",
    "OPEN": "number",
    "CLOSING": "number",
    "CONNECTING": "number",
    "CLOSED": "number",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "WebSocket"
  },
  "SVGFEPointLightElement": {
    "y": "SVGAnimatedNumber",
    "x": "SVGAnimatedNumber",
    "z": "SVGAnimatedNumber",
    "prototype": "SVGFEPointLightElement"
  },
  "ProgressEvent": {
    "loaded": "number",
    "lengthComputable": "bool",
    "total": "number",
    "initProgressEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, lengthComputableArg: bool, loadedArg: number, totalArg: number)",
    "prototype": "ProgressEvent"
  },
  "IDBObjectStore": {
    "indexNames": "DOMStringList",
    "name": "string",
    "transaction": "IDBTransaction",
    "keyPath": "string",
    "count": "fn(key?: ?) -> IDBRequest",
    "add": "fn(value: ?, key?: ?) -> IDBRequest",
    "clear": "fn() -> IDBRequest",
    "createIndex": "fn(name: string, keyPath: string, optionalParameters?: ?) -> IDBIndex",
    "put": "fn(value: ?, key?: ?) -> IDBRequest",
    "openCursor": "fn(range?: ?, direction?: string) -> IDBRequest",
    "deleteIndex": "fn(indexName: string)",
    "index": "fn(name: string) -> IDBIndex",
    "get": "fn(key: ?) -> IDBRequest",
    "delete": "fn(key: ?) -> IDBRequest",
    "prototype": "IDBObjectStore"
  },
  "SVGFEGaussianBlurElement": {
    "stdDeviationX": "SVGAnimatedNumber",
    "in1": "SVGAnimatedString",
    "stdDeviationY": "SVGAnimatedNumber",
    "setStdDeviation": "fn(stdDeviationX: number, stdDeviationY: number)",
    "prototype": "SVGFEGaussianBlurElement"
  },
  "SVGFilterPrimitiveStandardAttributes": {
    "y": "SVGAnimatedLength",
    "width": "SVGAnimatedLength",
    "x": "SVGAnimatedLength",
    "height": "SVGAnimatedLength",
    "result": "SVGAnimatedString"
  },
  "IDBVersionChangeEvent": {
    "newVersion": "number",
    "oldVersion": "number",
    "prototype": "IDBVersionChangeEvent"
  },
  "IDBIndex": {
    "unique": "bool",
    "name": "string",
    "keyPath": "string",
    "objectStore": "IDBObjectStore",
    "count": "fn(key?: ?) -> IDBRequest",
    "getKey": "fn(key: ?) -> IDBRequest",
    "openKeyCursor": "fn(range?: IDBKeyRange, direction?: string) -> IDBRequest",
    "get": "fn(key: ?) -> IDBRequest",
    "openCursor": "fn(range?: IDBKeyRange, direction?: string) -> IDBRequest",
    "prototype": "IDBIndex"
  },
  "FileList": {
    "length": "number",
    "item": "fn(index: number) -> File",
    "prototype": "FileList"
  },
  "IDBCursor": {
    "source": "?",
    "direction": "string",
    "key": "?",
    "primaryKey": "?",
    "advance": "fn(count: number)",
    "delete": "fn() -> IDBRequest",
    "continue": "fn(key?: ?)",
    "update": "fn(value: ?) -> IDBRequest",
    "PREV": "string",
    "PREV_NO_DUPLICATE": "string",
    "NEXT": "string",
    "NEXT_NO_DUPLICATE": "string",
    "prototype": "IDBCursor"
  },
  "SVGFESpecularLightingElement": {
    "kernelUnitLengthY": "SVGAnimatedNumber",
    "surfaceScale": "SVGAnimatedNumber",
    "specularExponent": "SVGAnimatedNumber",
    "in1": "SVGAnimatedString",
    "kernelUnitLengthX": "SVGAnimatedNumber",
    "specularConstant": "SVGAnimatedNumber",
    "prototype": "SVGFESpecularLightingElement"
  },
  "File": {
    "lastModifiedDate": "?",
    "name": "string",
    "prototype": "File"
  },
  "URL": {
    "revokeObjectURL": "fn(url: string)",
    "createObjectURL": "fn(object: ?, options?: ObjectURLOptions) -> string",
    "!type": "URL"
  },
  "IDBCursorWithValue": {
    "value": "?",
    "prototype": "IDBCursorWithValue"
  },
  "XMLHttpRequestEventTarget": {
    "onprogress": "fn(ev: ProgressEvent)",
    "onerror": "fn(ev: ErrorEvent)",
    "onload": "fn(ev: Event)",
    "ontimeout": "fn(ev: Event)",
    "onabort": "fn(ev: UIEvent)",
    "onloadstart": "fn(ev: Event)",
    "onloadend": "fn(ev: ProgressEvent)",
    "addEventListener": "fn(type: string, listener: fn(ev: ProgressEvent), useCapture?: bool)",
    "prototype": "XMLHttpRequestEventTarget"
  },
  "IDBEnvironment": {
    "msIndexedDB": "IDBFactory",
    "indexedDB": "IDBFactory"
  },
  "AudioTrackList": {
    "length": "number",
    "onchange": "fn(ev: Event)",
    "onaddtrack": "fn(ev: TrackEvent)",
    "onremovetrack": "fn(ev: ?)",
    "getTrackById": "fn(id: string) -> AudioTrack",
    "item": "fn(index: number) -> AudioTrack",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "AudioTrackList"
  },
  "MSBaseReader": {
    "onprogress": "fn(ev: ProgressEvent)",
    "readyState": "number",
    "onabort": "fn(ev: UIEvent)",
    "onloadend": "fn(ev: ProgressEvent)",
    "onerror": "fn(ev: ErrorEvent)",
    "onload": "fn(ev: Event)",
    "onloadstart": "fn(ev: Event)",
    "result": "?",
    "abort": "fn()",
    "LOADING": "number",
    "EMPTY": "number",
    "DONE": "number",
    "addEventListener": "fn(type: string, listener: fn(ev: ProgressEvent), useCapture?: bool)"
  },
  "SVGFEMorphologyElement": {
    "operator": "SVGAnimatedEnumeration",
    "radiusX": "SVGAnimatedNumber",
    "radiusY": "SVGAnimatedNumber",
    "in1": "SVGAnimatedString",
    "SVG_MORPHOLOGY_OPERATOR_UNKNOWN": "number",
    "SVG_MORPHOLOGY_OPERATOR_ERODE": "number",
    "SVG_MORPHOLOGY_OPERATOR_DILATE": "number",
    "prototype": "SVGFEMorphologyElement"
  },
  "SVGFEFuncRElement": {
    "prototype": "SVGFEFuncRElement"
  },
  "WindowTimersExtension": {
    "msSetImmediate": "fn(expression: ?, args: [?]) -> number",
    "clearImmediate": "fn(handle: number)",
    "msClearImmediate": "fn(handle: number)",
    "setImmediate": "fn(expression: ?, args: [?]) -> number"
  },
  "SVGFEDisplacementMapElement": {
    "in2": "SVGAnimatedString",
    "xChannelSelector": "SVGAnimatedEnumeration",
    "yChannelSelector": "SVGAnimatedEnumeration",
    "scale": "SVGAnimatedNumber",
    "in1": "SVGAnimatedString",
    "SVG_CHANNEL_B": "number",
    "SVG_CHANNEL_R": "number",
    "SVG_CHANNEL_G": "number",
    "SVG_CHANNEL_UNKNOWN": "number",
    "SVG_CHANNEL_A": "number",
    "prototype": "SVGFEDisplacementMapElement"
  },
  "AnimationEvent": {
    "animationName": "string",
    "elapsedTime": "number",
    "initAnimationEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, animationNameArg: string, elapsedTimeArg: number)",
    "prototype": "AnimationEvent"
  },
  "SVGComponentTransferFunctionElement": {
    "tableValues": "SVGAnimatedNumberList",
    "slope": "SVGAnimatedNumber",
    "type": "SVGAnimatedEnumeration",
    "exponent": "SVGAnimatedNumber",
    "amplitude": "SVGAnimatedNumber",
    "intercept": "SVGAnimatedNumber",
    "offset": "SVGAnimatedNumber",
    "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_TABLE": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE": "number",
    "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR": "number",
    "prototype": "SVGComponentTransferFunctionElement"
  },
  "MSRangeCollection": {
    "length": "number",
    "item": "fn(index: number) -> Range",
    "prototype": "MSRangeCollection"
  },
  "SVGFEDistantLightElement": {
    "azimuth": "SVGAnimatedNumber",
    "elevation": "SVGAnimatedNumber",
    "prototype": "SVGFEDistantLightElement"
  },
  "SVGFEFuncBElement": {
    "prototype": "SVGFEFuncBElement"
  },
  "IDBKeyRange": {
    "upper": "?",
    "upperOpen": "bool",
    "lower": "?",
    "lowerOpen": "bool",
    "prototype": "IDBKeyRange",
    "bound": "fn(lower: ?, upper: ?, lowerOpen?: bool, upperOpen?: bool) -> IDBKeyRange",
    "only": "fn(value: ?) -> IDBKeyRange",
    "lowerBound": "fn(bound: ?, open?: bool) -> IDBKeyRange",
    "upperBound": "fn(bound: ?, open?: bool) -> IDBKeyRange"
  },
  "WindowConsole": {
    "console": "Console"
  },
  "IDBTransaction": {
    "oncomplete": "fn(ev: Event)",
    "db": "IDBDatabase",
    "mode": "string",
    "error": "DOMError",
    "onerror": "fn(ev: ErrorEvent)",
    "onabort": "fn(ev: UIEvent)",
    "abort": "fn()",
    "objectStore": "fn(name: string) -> IDBObjectStore",
    "READ_ONLY": "string",
    "VERSION_CHANGE": "string",
    "READ_WRITE": "string",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "IDBTransaction"
  },
  "AudioTrack": {
    "kind": "string",
    "language": "string",
    "id": "string",
    "label": "string",
    "enabled": "bool",
    "sourceBuffer": "SourceBuffer",
    "prototype": "AudioTrack"
  },
  "SVGFEConvolveMatrixElement": {
    "orderY": "SVGAnimatedInteger",
    "kernelUnitLengthY": "SVGAnimatedNumber",
    "orderX": "SVGAnimatedInteger",
    "preserveAlpha": "SVGAnimatedBoolean",
    "kernelMatrix": "SVGAnimatedNumberList",
    "edgeMode": "SVGAnimatedEnumeration",
    "kernelUnitLengthX": "SVGAnimatedNumber",
    "bias": "SVGAnimatedNumber",
    "targetX": "SVGAnimatedInteger",
    "targetY": "SVGAnimatedInteger",
    "divisor": "SVGAnimatedNumber",
    "in1": "SVGAnimatedString",
    "SVG_EDGEMODE_WRAP": "number",
    "SVG_EDGEMODE_DUPLICATE": "number",
    "SVG_EDGEMODE_UNKNOWN": "number",
    "SVG_EDGEMODE_NONE": "number",
    "prototype": "SVGFEConvolveMatrixElement"
  },
  "TextTrackCueList": {
    "length": "number",
    "item": "fn(index: number) -> TextTrackCue",
    "getCueById": "fn(id: string) -> TextTrackCue",
    "prototype": "TextTrackCueList"
  },
  "CSSKeyframesRule": {
    "name": "string",
    "cssRules": "CSSRuleList",
    "findRule": "fn(rule: string) -> CSSKeyframeRule",
    "deleteRule": "fn(rule: string)",
    "appendRule": "fn(rule: string)",
    "prototype": "CSSKeyframesRule"
  },
  "SVGFETurbulenceElement": {
    "baseFrequencyX": "SVGAnimatedNumber",
    "numOctaves": "SVGAnimatedInteger",
    "type": "SVGAnimatedEnumeration",
    "baseFrequencyY": "SVGAnimatedNumber",
    "stitchTiles": "SVGAnimatedEnumeration",
    "seed": "SVGAnimatedNumber",
    "SVG_STITCHTYPE_UNKNOWN": "number",
    "SVG_STITCHTYPE_NOSTITCH": "number",
    "SVG_TURBULENCE_TYPE_UNKNOWN": "number",
    "SVG_TURBULENCE_TYPE_TURBULENCE": "number",
    "SVG_TURBULENCE_TYPE_FRACTALNOISE": "number",
    "SVG_STITCHTYPE_STITCH": "number",
    "prototype": "SVGFETurbulenceElement"
  },
  "TextTrackList": {
    "length": "number",
    "onaddtrack": "fn(ev: TrackEvent)",
    "item": "fn(index: number) -> TextTrack",
    "addEventListener": "fn(type: string, listener: fn(ev: TrackEvent), useCapture?: bool)",
    "prototype": "TextTrackList"
  },
  "SVGFEFuncGElement": {
    "prototype": "SVGFEFuncGElement"
  },
  "SVGFEColorMatrixElement": {
    "in1": "SVGAnimatedString",
    "type": "SVGAnimatedEnumeration",
    "values": "SVGAnimatedNumberList",
    "SVG_FECOLORMATRIX_TYPE_SATURATE": "number",
    "SVG_FECOLORMATRIX_TYPE_UNKNOWN": "number",
    "SVG_FECOLORMATRIX_TYPE_MATRIX": "number",
    "SVG_FECOLORMATRIX_TYPE_HUEROTATE": "number",
    "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA": "number",
    "prototype": "SVGFEColorMatrixElement"
  },
  "SVGFESpotLightElement": {
    "pointsAtY": "SVGAnimatedNumber",
    "y": "SVGAnimatedNumber",
    "limitingConeAngle": "SVGAnimatedNumber",
    "specularExponent": "SVGAnimatedNumber",
    "x": "SVGAnimatedNumber",
    "pointsAtZ": "SVGAnimatedNumber",
    "z": "SVGAnimatedNumber",
    "pointsAtX": "SVGAnimatedNumber",
    "prototype": "SVGFESpotLightElement"
  },
  "WindowBase64": {
    "btoa": "fn(rawString: string) -> string",
    "atob": "fn(encodedString: string) -> string"
  },
  "IDBDatabase": {
    "version": "string",
    "name": "string",
    "objectStoreNames": "DOMStringList",
    "onerror": "fn(ev: ErrorEvent)",
    "onabort": "fn(ev: UIEvent)",
    "createObjectStore": "fn(name: string, optionalParameters?: ?) -> IDBObjectStore",
    "close": "fn()",
    "transaction": "fn(storeNames: ?, mode?: string) -> IDBTransaction",
    "deleteObjectStore": "fn(name: string)",
    "addEventListener": "fn(type: string, listener: fn(ev: ErrorEvent), useCapture?: bool)",
    "prototype": "IDBDatabase"
  },
  "DOMStringList": {
    "length": "number",
    "contains": "fn(str: string) -> bool",
    "item": "fn(index: number) -> string",
    "prototype": "DOMStringList"
  },
  "IDBOpenDBRequest": {
    "onupgradeneeded": "fn(ev: IDBVersionChangeEvent)",
    "onblocked": "fn(ev: Event)",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "IDBOpenDBRequest"
  },
  "HTMLProgressElement": {
    "value": "number",
    "max": "number",
    "position": "number",
    "form": "HTMLFormElement",
    "prototype": "HTMLProgressElement"
  },
  "MSLaunchUriCallback": {},
  "SVGFEOffsetElement": {
    "dy": "SVGAnimatedNumber",
    "in1": "SVGAnimatedString",
    "dx": "SVGAnimatedNumber",
    "prototype": "SVGFEOffsetElement"
  },
  "MSUnsafeFunctionCallback": {},
  "TextTrack": {
    "language": "string",
    "mode": "?",
    "readyState": "number",
    "activeCues": "TextTrackCueList",
    "cues": "TextTrackCueList",
    "oncuechange": "fn(ev: Event)",
    "kind": "string",
    "onload": "fn(ev: Event)",
    "onerror": "fn(ev: ErrorEvent)",
    "label": "string",
    "addCue": "fn(cue: TextTrackCue)",
    "removeCue": "fn(cue: TextTrackCue)",
    "ERROR": "number",
    "SHOWING": "number",
    "LOADING": "number",
    "LOADED": "number",
    "NONE": "number",
    "HIDDEN": "number",
    "DISABLED": "number",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "TextTrack"
  },
  "MediaQueryListListener": {},
  "IDBRequest": {
    "source": "?",
    "onsuccess": "fn(ev: Event)",
    "error": "DOMError",
    "transaction": "IDBTransaction",
    "onerror": "fn(ev: ErrorEvent)",
    "readyState": "string",
    "result": "?",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "IDBRequest"
  },
  "MessagePort": {
    "onmessage": "fn(ev: MessageEvent)",
    "close": "fn()",
    "postMessage": "fn(message?: ?, ports?: ?)",
    "start": "fn()",
    "addEventListener": "fn(type: string, listener: fn(ev: MessageEvent), useCapture?: bool)",
    "prototype": "MessagePort"
  },
  "FileReader": {
    "error": "DOMError",
    "readAsArrayBuffer": "fn(blob: Blob)",
    "readAsDataURL": "fn(blob: Blob)",
    "readAsText": "fn(blob: Blob, encoding?: string)",
    "prototype": "FileReader"
  },
  "ApplicationCache": {
    "status": "number",
    "ondownloading": "fn(ev: Event)",
    "onprogress": "fn(ev: ProgressEvent)",
    "onupdateready": "fn(ev: Event)",
    "oncached": "fn(ev: Event)",
    "onobsolete": "fn(ev: Event)",
    "onerror": "fn(ev: ErrorEvent)",
    "onchecking": "fn(ev: Event)",
    "onnoupdate": "fn(ev: Event)",
    "swapCache": "fn()",
    "abort": "fn()",
    "update": "fn()",
    "CHECKING": "number",
    "UNCACHED": "number",
    "UPDATEREADY": "number",
    "DOWNLOADING": "number",
    "IDLE": "number",
    "OBSOLETE": "number",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "ApplicationCache"
  },
  "FrameRequestCallback": {},
  "PopStateEvent": {
    "state": "?",
    "initPopStateEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, stateArg: ?)",
    "prototype": "PopStateEvent"
  },
  "CSSKeyframeRule": {
    "keyText": "string",
    "style": "CSSStyleDeclaration",
    "prototype": "CSSKeyframeRule"
  },
  "MSFileSaver": {
    "msSaveBlob": "fn(blob: ?, defaultName?: string) -> bool",
    "msSaveOrOpenBlob": "fn(blob: ?, defaultName?: string) -> bool"
  },
  "MSStream": {
    "type": "string",
    "msDetachStream": "fn() -> ?",
    "msClose": "fn()",
    "prototype": "MSStream"
  },
  "MSBlobBuilder": {
    "append": "fn(data: ?, endings?: string)",
    "getBlob": "fn(contentType?: string) -> Blob",
    "prototype": "MSBlobBuilder"
  },
  "DOMSettableTokenList": {
    "value": "string",
    "prototype": "DOMSettableTokenList"
  },
  "IDBFactory": {
    "open": "fn(name: string, version?: number) -> IDBOpenDBRequest",
    "cmp": "fn(first: ?, second: ?) -> number",
    "deleteDatabase": "fn(name: string) -> IDBOpenDBRequest",
    "prototype": "IDBFactory"
  },
  "MSPointerEvent": {
    "width": "number",
    "rotation": "number",
    "pressure": "number",
    "pointerType": "?",
    "isPrimary": "bool",
    "tiltY": "number",
    "height": "number",
    "intermediatePoints": "?",
    "currentPoint": "?",
    "tiltX": "number",
    "hwTimestamp": "number",
    "pointerId": "number",
    "initPointerEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: ?, hwTimestampArg: number, isPrimary: bool)",
    "getCurrentPoint": "fn(element: Element)",
    "getIntermediatePoints": "fn(element: Element)",
    "MSPOINTER_TYPE_PEN": "number",
    "MSPOINTER_TYPE_MOUSE": "number",
    "MSPOINTER_TYPE_TOUCH": "number",
    "prototype": "MSPointerEvent"
  },
  "MSManipulationEvent": {
    "lastState": "number",
    "currentState": "number",
    "initMSManipulationEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, lastState: number, currentState: number)",
    "MS_MANIPULATION_STATE_STOPPED": "number",
    "MS_MANIPULATION_STATE_ACTIVE": "number",
    "MS_MANIPULATION_STATE_INERTIA": "number",
    "MS_MANIPULATION_STATE_SELECTING": "number",
    "MS_MANIPULATION_STATE_COMMITTED": "number",
    "MS_MANIPULATION_STATE_PRESELECT": "number",
    "MS_MANIPULATION_STATE_DRAGGING": "number",
    "MS_MANIPULATION_STATE_CANCELLED": "number",
    "prototype": "MSManipulationEvent"
  },
  "FormData": {
    "append": "fn(name: ?, value: ?, blobName?: string)",
    "prototype": "FormData"
  },
  "HTMLDataListElement": {
    "options": "HTMLCollection",
    "prototype": "HTMLDataListElement"
  },
  "SVGFEImageElement": {
    "preserveAspectRatio": "SVGAnimatedPreserveAspectRatio",
    "prototype": "SVGFEImageElement"
  },
  "AbstractWorker": {
    "onerror": "fn(ev: ErrorEvent)",
    "addEventListener": "fn(type: string, listener: fn(ev: ErrorEvent), useCapture?: bool)"
  },
  "SVGFECompositeElement": {
    "operator": "SVGAnimatedEnumeration",
    "in2": "SVGAnimatedString",
    "k2": "SVGAnimatedNumber",
    "k1": "SVGAnimatedNumber",
    "k3": "SVGAnimatedNumber",
    "in1": "SVGAnimatedString",
    "k4": "SVGAnimatedNumber",
    "SVG_FECOMPOSITE_OPERATOR_OUT": "number",
    "SVG_FECOMPOSITE_OPERATOR_OVER": "number",
    "SVG_FECOMPOSITE_OPERATOR_XOR": "number",
    "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC": "number",
    "SVG_FECOMPOSITE_OPERATOR_UNKNOWN": "number",
    "SVG_FECOMPOSITE_OPERATOR_IN": "number",
    "SVG_FECOMPOSITE_OPERATOR_ATOP": "number",
    "prototype": "SVGFECompositeElement"
  },
  "ValidityState": {
    "customError": "bool",
    "valueMissing": "bool",
    "stepMismatch": "bool",
    "rangeUnderflow": "bool",
    "rangeOverflow": "bool",
    "typeMismatch": "bool",
    "patternMismatch": "bool",
    "tooLong": "bool",
    "valid": "bool",
    "prototype": "ValidityState"
  },
  "HTMLTrackElement": {
    "kind": "string",
    "src": "string",
    "srclang": "string",
    "track": "TextTrack",
    "label": "string",
    "default": "bool",
    "readyState": "number",
    "ERROR": "number",
    "LOADING": "number",
    "LOADED": "number",
    "NONE": "number",
    "prototype": "HTMLTrackElement"
  },
  "MSApp": {
    "createFileFromStorageFile": "fn(storageFile: ?) -> File",
    "createBlobFromRandomAccessStream": "fn(type: string, seeker: ?) -> Blob",
    "createStreamFromInputStream": "fn(type: string, inputStream: ?) -> MSStream",
    "terminateApp": "fn(exceptionObject: ?)",
    "createDataPackage": "fn(object: ?) -> ?",
    "execUnsafeLocalFunction": "fn(unsafeFunction: MSUnsafeFunctionCallback) -> ?",
    "getHtmlPrintDocumentSource": "fn(htmlDoc: ?) -> ?",
    "addPublicLocalApplicationUri": "fn(uri: string)",
    "createDataPackageFromSelection": "fn() -> ?",
    "getViewOpener": "fn() -> MSAppView",
    "suppressSubdownloadCredentialPrompts": "fn(suppress: bool)",
    "execAsyncAtPriority": "fn(asynchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, args: [?])",
    "isTaskScheduledAtPriorityOrHigher": "fn(priority: string) -> bool",
    "execAtPriority": "fn(synchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, args: [?]) -> ?",
    "createNewView": "fn(uri: string) -> MSAppView",
    "getCurrentPriority": "fn() -> string",
    "NORMAL": "string",
    "HIGH": "string",
    "IDLE": "string",
    "CURRENT": "string",
    "!type": "MSApp"
  },
  "SVGFEComponentTransferElement": {
    "in1": "SVGAnimatedString",
    "prototype": "SVGFEComponentTransferElement"
  },
  "SVGFEDiffuseLightingElement": {
    "kernelUnitLengthY": "SVGAnimatedNumber",
    "surfaceScale": "SVGAnimatedNumber",
    "in1": "SVGAnimatedString",
    "kernelUnitLengthX": "SVGAnimatedNumber",
    "diffuseConstant": "SVGAnimatedNumber",
    "prototype": "SVGFEDiffuseLightingElement"
  },
  "MSCSSMatrix": {
    "m24": "number",
    "m34": "number",
    "a": "number",
    "d": "number",
    "m32": "number",
    "m41": "number",
    "m11": "number",
    "f": "number",
    "e": "number",
    "m23": "number",
    "m14": "number",
    "m33": "number",
    "m22": "number",
    "m21": "number",
    "c": "number",
    "m12": "number",
    "b": "number",
    "m42": "number",
    "m31": "number",
    "m43": "number",
    "m13": "number",
    "m44": "number",
    "multiply": "fn(secondMatrix: MSCSSMatrix) -> MSCSSMatrix",
    "skewY": "fn(angle: number) -> MSCSSMatrix",
    "setMatrixValue": "fn(value: string)",
    "inverse": "fn() -> MSCSSMatrix",
    "rotateAxisAngle": "fn(x: number, y: number, z: number, angle: number) -> MSCSSMatrix",
    "rotate": "fn(angleX: number, angleY?: number, angleZ?: number) -> MSCSSMatrix",
    "translate": "fn(x: number, y: number, z?: number) -> MSCSSMatrix",
    "scale": "fn(scaleX: number, scaleY?: number, scaleZ?: number) -> MSCSSMatrix",
    "skewX": "fn(angle: number) -> MSCSSMatrix",
    "prototype": "MSCSSMatrix"
  },
  "Worker": {
    "onmessage": "fn(ev: MessageEvent)",
    "postMessage": "fn(message: ?, ports?: ?)",
    "terminate": "fn()",
    "addEventListener": "fn(type: string, listener: fn(ev: ErrorEvent), useCapture?: bool)",
    "prototype": "Worker"
  },
  "MSExecAtPriorityFunctionCallback": {},
  "MSGraphicsTrust": {
    "status": "string",
    "constrictionActive": "bool",
    "prototype": "MSGraphicsTrust"
  },
  "SubtleCrypto": {
    "unwrapKey": "fn(wrappedKey: ArrayBufferView, keyAlgorithm: ?, keyEncryptionKey: Key, extractable?: bool, keyUsages?: [string]) -> KeyOperation",
    "encrypt": "fn(algorithm: ?, key: Key, buffer?: ArrayBufferView) -> CryptoOperation",
    "importKey": "fn(format: string, keyData: ArrayBufferView, algorithm: ?, extractable?: bool, keyUsages?: [string]) -> KeyOperation",
    "wrapKey": "fn(key: Key, keyEncryptionKey: Key, keyWrappingAlgorithm: ?) -> KeyOperation",
    "verify": "fn(algorithm: ?, key: Key, signature: ArrayBufferView, buffer?: ArrayBufferView) -> CryptoOperation",
    "deriveKey": "fn(algorithm: ?, baseKey: Key, derivedKeyType: ?, extractable?: bool, keyUsages?: [string]) -> KeyOperation",
    "digest": "fn(algorithm: ?, buffer?: ArrayBufferView) -> CryptoOperation",
    "exportKey": "fn(format: string, key: Key) -> KeyOperation",
    "generateKey": "fn(algorithm: ?, extractable?: bool, keyUsages?: [string]) -> KeyOperation",
    "sign": "fn(algorithm: ?, key: Key, buffer?: ArrayBufferView) -> CryptoOperation",
    "decrypt": "fn(algorithm: ?, key: Key, buffer?: ArrayBufferView) -> CryptoOperation",
    "prototype": "SubtleCrypto"
  },
  "Crypto": {
    "subtle": "SubtleCrypto",
    "prototype": "Crypto"
  },
  "VideoPlaybackQuality": {
    "totalFrameDelay": "number",
    "creationTime": "number",
    "totalVideoFrames": "number",
    "droppedVideoFrames": "number",
    "prototype": "VideoPlaybackQuality"
  },
  "GlobalEventHandlers": {
    "onpointerenter": "fn(ev: PointerEvent)",
    "onpointerout": "fn(ev: PointerEvent)",
    "onpointerdown": "fn(ev: PointerEvent)",
    "onpointerup": "fn(ev: PointerEvent)",
    "onpointercancel": "fn(ev: PointerEvent)",
    "onpointerover": "fn(ev: PointerEvent)",
    "onpointermove": "fn(ev: PointerEvent)",
    "onpointerleave": "fn(ev: PointerEvent)",
    "addEventListener": "fn(type: string, listener: fn(ev: PointerEvent), useCapture?: bool)"
  },
  "Key": {
    "algorithm": "Algorithm",
    "type": "string",
    "extractable": "bool",
    "keyUsage": "[string]",
    "prototype": "Key"
  },
  "DeviceAcceleration": {
    "y": "number",
    "x": "number",
    "z": "number",
    "prototype": "DeviceAcceleration"
  },
  "HTMLAllCollection": {
    "namedItem": "fn(name: string) -> Element",
    "prototype": "HTMLAllCollection"
  },
  "AesGcmEncryptResult": {
    "ciphertext": "ArrayBuffer",
    "tag": "ArrayBuffer",
    "prototype": "AesGcmEncryptResult"
  },
  "NavigationCompletedEvent": {
    "webErrorStatus": "number",
    "isSuccess": "bool",
    "prototype": "NavigationCompletedEvent"
  },
  "MutationRecord": {
    "oldValue": "string",
    "previousSibling": "Node",
    "addedNodes": "NodeList",
    "attributeName": "string",
    "removedNodes": "NodeList",
    "target": "Node",
    "nextSibling": "Node",
    "attributeNamespace": "string",
    "type": "string",
    "prototype": "MutationRecord"
  },
  "MimeTypeArray": {
    "length": "number",
    "item": "fn(index: number) -> Plugin",
    "namedItem": "fn(type: string) -> Plugin",
    "prototype": "MimeTypeArray"
  },
  "KeyOperation": {
    "oncomplete": "fn(ev: Event)",
    "onerror": "fn(ev: ErrorEvent)",
    "result": "?",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "KeyOperation"
  },
  "DOMStringMap": {
    "prototype": "DOMStringMap"
  },
  "DeviceOrientationEvent": {
    "gamma": "number",
    "alpha": "number",
    "absolute": "bool",
    "beta": "number",
    "initDeviceOrientationEvent": "fn(type: string, bubbles: bool, cancelable: bool, alpha: number, beta: number, gamma: number, absolute: bool)",
    "prototype": "DeviceOrientationEvent"
  },
  "MSMediaKeys": {
    "keySystem": "string",
    "createSession": "fn(type: string, initData: Uint8Array, cdmData?: Uint8Array) -> MSMediaKeySession",
    "prototype": "MSMediaKeys",
    "isTypeSupported": "fn(keySystem: string, type?: string) -> bool"
  },
  "MSMediaKeyMessageEvent": {
    "destinationURL": "string",
    "message": "Uint8Array",
    "prototype": "MSMediaKeyMessageEvent"
  },
  "MSHTMLWebViewElement": {
    "documentTitle": "string",
    "width": "number",
    "src": "string",
    "canGoForward": "bool",
    "height": "number",
    "canGoBack": "bool",
    "navigateWithHttpRequestMessage": "fn(requestMessage: ?)",
    "goBack": "fn()",
    "navigate": "fn(uri: string)",
    "stop": "fn()",
    "navigateToString": "fn(contents: string)",
    "captureSelectedContentToDataPackageAsync": "fn() -> MSWebViewAsyncOperation",
    "capturePreviewToBlobAsync": "fn() -> MSWebViewAsyncOperation",
    "refresh": "fn()",
    "goForward": "fn()",
    "navigateToLocalStreamUri": "fn(source: string, streamResolver: ?)",
    "invokeScriptAsync": "fn(scriptName: string, args: [?]) -> MSWebViewAsyncOperation",
    "buildLocalStreamUri": "fn(contentIdentifier: string, relativePath: string) -> string",
    "prototype": "MSHTMLWebViewElement"
  },
  "NavigationEvent": {
    "uri": "string",
    "prototype": "NavigationEvent"
  },
  "RandomSource": {
    "getRandomValues": "fn(array: ArrayBufferView) -> ArrayBufferView"
  },
  "SourceBuffer": {
    "updating": "bool",
    "appendWindowStart": "number",
    "appendWindowEnd": "number",
    "buffered": "TimeRanges",
    "timestampOffset": "number",
    "audioTracks": "AudioTrackList",
    "appendBuffer": "fn(data: ArrayBuffer)",
    "remove": "fn(start: number, end: number)",
    "abort": "fn()",
    "appendStream": "fn(stream: MSStream, maxSize?: number)",
    "prototype": "SourceBuffer"
  },
  "MSInputMethodContext": {
    "oncandidatewindowshow": "fn(ev: ?)",
    "target": "HTMLElement",
    "compositionStartOffset": "number",
    "oncandidatewindowhide": "fn(ev: ?)",
    "oncandidatewindowupdate": "fn(ev: ?)",
    "compositionEndOffset": "number",
    "getCompositionAlternatives": "fn() -> [string]",
    "getCandidateWindowClientRect": "fn() -> ClientRect",
    "hasComposition": "fn() -> bool",
    "isCandidateWindowVisible": "fn() -> bool",
    "addEventListener": "fn(type: string, listener: fn(ev: ?), useCapture?: bool)",
    "prototype": "MSInputMethodContext"
  },
  "DeviceRotationRate": {
    "gamma": "number",
    "alpha": "number",
    "beta": "number",
    "prototype": "DeviceRotationRate"
  },
  "PluginArray": {
    "length": "number",
    "refresh": "fn(reload?: bool)",
    "item": "fn(index: number) -> Plugin",
    "namedItem": "fn(name: string) -> Plugin",
    "prototype": "PluginArray"
  },
  "MSMediaKeyError": {
    "systemCode": "number",
    "code": "number",
    "MS_MEDIA_KEYERR_SERVICE": "number",
    "MS_MEDIA_KEYERR_HARDWARECHANGE": "number",
    "MS_MEDIA_KEYERR_OUTPUT": "number",
    "MS_MEDIA_KEYERR_DOMAIN": "number",
    "MS_MEDIA_KEYERR_UNKNOWN": "number",
    "MS_MEDIA_KEYERR_CLIENT": "number",
    "prototype": "MSMediaKeyError"
  },
  "Plugin": {
    "length": "number",
    "filename": "string",
    "version": "string",
    "name": "string",
    "description": "string",
    "item": "fn(index: number) -> MimeType",
    "namedItem": "fn(type: string) -> MimeType",
    "prototype": "Plugin"
  },
  "MediaSource": {
    "sourceBuffers": "SourceBufferList",
    "duration": "number",
    "readyState": "string",
    "activeSourceBuffers": "SourceBufferList",
    "addSourceBuffer": "fn(type: string) -> SourceBuffer",
    "endOfStream": "fn(error?: string)",
    "removeSourceBuffer": "fn(sourceBuffer: SourceBuffer)",
    "prototype": "MediaSource",
    "isTypeSupported": "fn(type: string) -> bool"
  },
  "SourceBufferList": {
    "length": "number",
    "item": "fn(index: number) -> SourceBuffer",
    "prototype": "SourceBufferList"
  },
  "XMLDocument": {
    "prototype": "XMLDocument"
  },
  "DeviceMotionEvent": {
    "rotationRate": "DeviceRotationRate",
    "acceleration": "DeviceAcceleration",
    "interval": "number",
    "accelerationIncludingGravity": "DeviceAcceleration",
    "initDeviceMotionEvent": "fn(type: string, bubbles: bool, cancelable: bool, acceleration: DeviceAccelerationDict, accelerationIncludingGravity: DeviceAccelerationDict, rotationRate: DeviceRotationRateDict, interval: number)",
    "prototype": "DeviceMotionEvent"
  },
  "MimeType": {
    "enabledPlugin": "Plugin",
    "suffixes": "string",
    "type": "string",
    "description": "string",
    "prototype": "MimeType"
  },
  "PointerEvent": {
    "width": "number",
    "rotation": "number",
    "pressure": "number",
    "pointerType": "?",
    "isPrimary": "bool",
    "tiltY": "number",
    "height": "number",
    "intermediatePoints": "?",
    "currentPoint": "?",
    "tiltX": "number",
    "hwTimestamp": "number",
    "pointerId": "number",
    "initPointerEvent": "fn(typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: ?, hwTimestampArg: number, isPrimary: bool)",
    "getCurrentPoint": "fn(element: Element)",
    "getIntermediatePoints": "fn(element: Element)",
    "prototype": "PointerEvent"
  },
  "MSDocumentExtensions": {
    "captureEvents": "fn()",
    "releaseEvents": "fn()"
  },
  "MutationObserver": {
    "observe": "fn(target: Node, options: MutationObserverInit)",
    "takeRecords": "fn() -> [MutationRecord]",
    "disconnect": "fn()",
    "prototype": "MutationObserver"
  },
  "MSWebViewAsyncOperation": {
    "target": "MSHTMLWebViewElement",
    "oncomplete": "fn(ev: Event)",
    "error": "DOMError",
    "onerror": "fn(ev: ErrorEvent)",
    "readyState": "number",
    "type": "number",
    "result": "?",
    "start": "fn()",
    "ERROR": "number",
    "TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION": "number",
    "TYPE_INVOKE_SCRIPT": "number",
    "COMPLETED": "number",
    "TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM": "number",
    "STARTED": "number",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "MSWebViewAsyncOperation"
  },
  "ScriptNotifyEvent": {
    "value": "string",
    "callingUri": "string",
    "prototype": "ScriptNotifyEvent"
  },
  "PerformanceNavigationTiming": {
    "redirectStart": "number",
    "domainLookupEnd": "number",
    "responseStart": "number",
    "domComplete": "number",
    "domainLookupStart": "number",
    "loadEventStart": "number",
    "unloadEventEnd": "number",
    "fetchStart": "number",
    "requestStart": "number",
    "domInteractive": "number",
    "navigationStart": "number",
    "connectEnd": "number",
    "loadEventEnd": "number",
    "connectStart": "number",
    "responseEnd": "number",
    "domLoading": "number",
    "redirectEnd": "number",
    "redirectCount": "number",
    "unloadEventStart": "number",
    "domContentLoadedEventStart": "number",
    "domContentLoadedEventEnd": "number",
    "type": "string",
    "prototype": "PerformanceNavigationTiming"
  },
  "MSMediaKeyNeededEvent": {
    "initData": "Uint8Array",
    "prototype": "MSMediaKeyNeededEvent"
  },
  "LongRunningScriptDetectedEvent": {
    "stopPageScriptExecution": "bool",
    "executionTime": "number",
    "prototype": "LongRunningScriptDetectedEvent"
  },
  "MSAppView": {
    "viewId": "number",
    "close": "fn()",
    "postMessage": "fn(message: ?, targetOrigin: string, ports?: ?)",
    "prototype": "MSAppView"
  },
  "PerfWidgetExternal": {
    "maxCpuSpeed": "number",
    "independentRenderingEnabled": "bool",
    "irDisablingContentString": "string",
    "irStatusAvailable": "bool",
    "performanceCounter": "number",
    "averagePaintTime": "number",
    "activeNetworkRequestCount": "number",
    "paintRequestsPerSecond": "number",
    "extraInformationEnabled": "bool",
    "performanceCounterFrequency": "number",
    "averageFrameTime": "number",
    "repositionWindow": "fn(x: number, y: number)",
    "getRecentMemoryUsage": "fn(last: number) -> ?",
    "getMemoryUsage": "fn() -> number",
    "resizeWindow": "fn(width: number, height: number)",
    "getProcessCpuUsage": "fn() -> number",
    "removeEventListener": "fn(eventType: string, callback: fn(ev: ?))",
    "getRecentCpuUsage": "fn(last: number) -> ?",
    "addEventListener": "fn(eventType: string, callback: fn(ev: ?))",
    "getRecentFrames": "fn(last: number) -> ?",
    "getRecentPaintRequests": "fn(last: number) -> ?",
    "prototype": "PerfWidgetExternal"
  },
  "PageTransitionEvent": {
    "persisted": "bool",
    "prototype": "PageTransitionEvent"
  },
  "MutationCallback": {},
  "HTMLDocument": {
    "prototype": "HTMLDocument"
  },
  "KeyPair": {
    "privateKey": "Key",
    "publicKey": "Key",
    "prototype": "KeyPair"
  },
  "MSMediaKeySession": {
    "sessionId": "string",
    "error": "MSMediaKeyError",
    "keySystem": "string",
    "close": "fn()",
    "update": "fn(key: Uint8Array)",
    "prototype": "MSMediaKeySession"
  },
  "UnviewableContentIdentifiedEvent": {
    "referrer": "string",
    "prototype": "UnviewableContentIdentifiedEvent"
  },
  "CryptoOperation": {
    "algorithm": "Algorithm",
    "oncomplete": "fn(ev: Event)",
    "onerror": "fn(ev: ErrorEvent)",
    "onprogress": "fn(ev: ProgressEvent)",
    "onabort": "fn(ev: UIEvent)",
    "key": "Key",
    "result": "?",
    "abort": "fn()",
    "finish": "fn()",
    "process": "fn(buffer: ArrayBufferView)",
    "addEventListener": "fn(type: string, listener: fn(ev: Event), useCapture?: bool)",
    "prototype": "CryptoOperation"
  },
  "WebGLTexture": {
    "prototype": "WebGLTexture"
  },
  "OES_texture_float": {
    "prototype": "OES_texture_float"
  },
  "WebGLContextEvent": {
    "statusMessage": "string",
    "prototype": "WebGLContextEvent"
  },
  "WebGLRenderbuffer": {
    "prototype": "WebGLRenderbuffer"
  },
  "WebGLUniformLocation": {
    "prototype": "WebGLUniformLocation"
  },
  "WebGLActiveInfo": {
    "name": "string",
    "type": "number",
    "size": "number",
    "prototype": "WebGLActiveInfo"
  },
  "WEBGL_compressed_texture_s3tc": {
    "COMPRESSED_RGBA_S3TC_DXT1_EXT": "number",
    "COMPRESSED_RGBA_S3TC_DXT5_EXT": "number",
    "COMPRESSED_RGBA_S3TC_DXT3_EXT": "number",
    "COMPRESSED_RGB_S3TC_DXT1_EXT": "number",
    "prototype": "WEBGL_compressed_texture_s3tc"
  },
  "WebGLRenderingContext": {
    "drawingBufferWidth": "number",
    "drawingBufferHeight": "number",
    "canvas": "HTMLCanvasElement",
    "getUniformLocation": "fn(program: WebGLProgram, name: string) -> WebGLUniformLocation",
    "bindTexture": "fn(target: number, texture: WebGLTexture)",
    "bufferData": "fn(target: number, data: ArrayBufferView, usage: number)",
    "depthMask": "fn(flag: bool)",
    "getUniform": "fn(program: WebGLProgram, location: WebGLUniformLocation) -> ?",
    "vertexAttrib3fv": "fn(indx: number, values: [number])",
    "linkProgram": "fn(program: WebGLProgram)",
    "getSupportedExtensions": "fn() -> [string]",
    "bufferSubData": "fn(target: number, offset: number, data: ArrayBuffer)",
    "vertexAttribPointer": "fn(indx: number, size: number, type: number, normalized: bool, stride: number, offset: number)",
    "polygonOffset": "fn(factor: number, units: number)",
    "blendColor": "fn(red: number, green: number, blue: number, alpha: number)",
    "createTexture": "fn() -> WebGLTexture",
    "hint": "fn(target: number, mode: number)",
    "getVertexAttrib": "fn(index: number, pname: number) -> ?",
    "enableVertexAttribArray": "fn(index: number)",
    "depthRange": "fn(zNear: number, zFar: number)",
    "cullFace": "fn(mode: number)",
    "createFramebuffer": "fn() -> WebGLFramebuffer",
    "uniformMatrix4fv": "fn(location: WebGLUniformLocation, transpose: bool, value: [number])",
    "framebufferTexture2D": "fn(target: number, attachment: number, textarget: number, texture: WebGLTexture, level: number)",
    "deleteFramebuffer": "fn(framebuffer: WebGLFramebuffer)",
    "colorMask": "fn(red: bool, green: bool, blue: bool, alpha: bool)",
    "compressedTexImage2D": "fn(target: number, level: number, internalformat: number, width: number, height: number, border: number, data: ArrayBufferView)",
    "uniformMatrix2fv": "fn(location: WebGLUniformLocation, transpose: bool, value: [number])",
    "getExtension": "fn(name: string) -> ?",
    "createProgram": "fn() -> WebGLProgram",
    "deleteShader": "fn(shader: WebGLShader)",
    "getAttachedShaders": "fn(program: WebGLProgram) -> [WebGLShader]",
    "enable": "fn(cap: number)",
    "blendEquation": "fn(mode: number)",
    "texImage2D": "fn(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView)",
    "createBuffer": "fn() -> WebGLBuffer",
    "deleteTexture": "fn(texture: WebGLTexture)",
    "useProgram": "fn(program: WebGLProgram)",
    "vertexAttrib2fv": "fn(indx: number, values: [number])",
    "checkFramebufferStatus": "fn(target: number) -> number",
    "frontFace": "fn(mode: number)",
    "getBufferParameter": "fn(target: number, pname: number) -> ?",
    "texSubImage2D": "fn(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView)",
    "copyTexImage2D": "fn(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number)",
    "getVertexAttribOffset": "fn(index: number, pname: number) -> number",
    "disableVertexAttribArray": "fn(index: number)",
    "blendFunc": "fn(sfactor: number, dfactor: number)",
    "drawElements": "fn(mode: number, count: number, type: number, offset: number)",
    "isFramebuffer": "fn(framebuffer: WebGLFramebuffer) -> bool",
    "uniform3iv": "fn(location: WebGLUniformLocation, v: [number])",
    "lineWidth": "fn(width: number)",
    "getShaderInfoLog": "fn(shader: WebGLShader) -> string",
    "getTexParameter": "fn(target: number, pname: number) -> ?",
    "getParameter": "fn(pname: number) -> ?",
    "getShaderPrecisionFormat": "fn(shadertype: number, precisiontype: number) -> WebGLShaderPrecisionFormat",
    "getContextAttributes": "fn() -> WebGLContextAttributes",
    "vertexAttrib1f": "fn(indx: number, x: number)",
    "bindFramebuffer": "fn(target: number, framebuffer: WebGLFramebuffer)",
    "compressedTexSubImage2D": "fn(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, data: ArrayBufferView)",
    "isContextLost": "fn() -> bool",
    "uniform1iv": "fn(location: WebGLUniformLocation, v: [number])",
    "getRenderbufferParameter": "fn(target: number, pname: number) -> ?",
    "uniform2fv": "fn(location: WebGLUniformLocation, v: [number])",
    "isTexture": "fn(texture: WebGLTexture) -> bool",
    "getError": "fn() -> number",
    "shaderSource": "fn(shader: WebGLShader, source: string)",
    "deleteRenderbuffer": "fn(renderbuffer: WebGLRenderbuffer)",
    "stencilMask": "fn(mask: number)",
    "bindBuffer": "fn(target: number, buffer: WebGLBuffer)",
    "getAttribLocation": "fn(program: WebGLProgram, name: string) -> number",
    "uniform3i": "fn(location: WebGLUniformLocation, x: number, y: number, z: number)",
    "blendEquationSeparate": "fn(modeRGB: number, modeAlpha: number)",
    "clear": "fn(mask: number)",
    "blendFuncSeparate": "fn(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number)",
    "stencilFuncSeparate": "fn(face: number, func: number, ref: number, mask: number)",
    "readPixels": "fn(x: number, y: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView)",
    "scissor": "fn(x: number, y: number, width: number, height: number)",
    "uniform2i": "fn(location: WebGLUniformLocation, x: number, y: number)",
    "getActiveAttrib": "fn(program: WebGLProgram, index: number) -> WebGLActiveInfo",
    "getShaderSource": "fn(shader: WebGLShader) -> string",
    "generateMipmap": "fn(target: number)",
    "bindAttribLocation": "fn(program: WebGLProgram, index: number, name: string)",
    "uniform1fv": "fn(location: WebGLUniformLocation, v: [number])",
    "uniform2iv": "fn(location: WebGLUniformLocation, v: [number])",
    "stencilOp": "fn(fail: number, zfail: number, zpass: number)",
    "uniform4fv": "fn(location: WebGLUniformLocation, v: [number])",
    "vertexAttrib1fv": "fn(indx: number, values: [number])",
    "flush": "fn()",
    "uniform4f": "fn(location: WebGLUniformLocation, x: number, y: number, z: number, w: number)",
    "deleteProgram": "fn(program: WebGLProgram)",
    "isRenderbuffer": "fn(renderbuffer: WebGLRenderbuffer) -> bool",
    "uniform1i": "fn(location: WebGLUniformLocation, x: number)",
    "getProgramParameter": "fn(program: WebGLProgram, pname: number) -> ?",
    "getActiveUniform": "fn(program: WebGLProgram, index: number) -> WebGLActiveInfo",
    "stencilFunc": "fn(func: number, ref: number, mask: number)",
    "pixelStorei": "fn(pname: number, param: number)",
    "disable": "fn(cap: number)",
    "vertexAttrib4fv": "fn(indx: number, values: [number])",
    "createRenderbuffer": "fn() -> WebGLRenderbuffer",
    "isBuffer": "fn(buffer: WebGLBuffer) -> bool",
    "stencilOpSeparate": "fn(face: number, fail: number, zfail: number, zpass: number)",
    "getFramebufferAttachmentParameter": "fn(target: number, attachment: number, pname: number) -> ?",
    "uniform4i": "fn(location: WebGLUniformLocation, x: number, y: number, z: number, w: number)",
    "sampleCoverage": "fn(value: number, invert: bool)",
    "depthFunc": "fn(func: number)",
    "texParameterf": "fn(target: number, pname: number, param: number)",
    "vertexAttrib3f": "fn(indx: number, x: number, y: number, z: number)",
    "drawArrays": "fn(mode: number, first: number, count: number)",
    "texParameteri": "fn(target: number, pname: number, param: number)",
    "vertexAttrib4f": "fn(indx: number, x: number, y: number, z: number, w: number)",
    "getShaderParameter": "fn(shader: WebGLShader, pname: number) -> ?",
    "clearDepth": "fn(depth: number)",
    "activeTexture": "fn(texture: number)",
    "viewport": "fn(x: number, y: number, width: number, height: number)",
    "detachShader": "fn(program: WebGLProgram, shader: WebGLShader)",
    "uniform1f": "fn(location: WebGLUniformLocation, x: number)",
    "uniformMatrix3fv": "fn(location: WebGLUniformLocation, transpose: bool, value: [number])",
    "deleteBuffer": "fn(buffer: WebGLBuffer)",
    "copyTexSubImage2D": "fn(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number)",
    "uniform3fv": "fn(location: WebGLUniformLocation, v: [number])",
    "stencilMaskSeparate": "fn(face: number, mask: number)",
    "attachShader": "fn(program: WebGLProgram, shader: WebGLShader)",
    "compileShader": "fn(shader: WebGLShader)",
    "clearColor": "fn(red: number, green: number, blue: number, alpha: number)",
    "isShader": "fn(shader: WebGLShader) -> bool",
    "clearStencil": "fn(s: number)",
    "framebufferRenderbuffer": "fn(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer)",
    "finish": "fn()",
    "uniform2f": "fn(location: WebGLUniformLocation, x: number, y: number)",
    "renderbufferStorage": "fn(target: number, internalformat: number, width: number, height: number)",
    "uniform3f": "fn(location: WebGLUniformLocation, x: number, y: number, z: number)",
    "getProgramInfoLog": "fn(program: WebGLProgram) -> string",
    "validateProgram": "fn(program: WebGLProgram)",
    "isEnabled": "fn(cap: number) -> bool",
    "vertexAttrib2f": "fn(indx: number, x: number, y: number)",
    "isProgram": "fn(program: WebGLProgram) -> bool",
    "createShader": "fn(type: number) -> WebGLShader",
    "bindRenderbuffer": "fn(target: number, renderbuffer: WebGLRenderbuffer)",
    "uniform4iv": "fn(location: WebGLUniformLocation, v: [number])",
    "DEPTH_FUNC": "number",
    "DEPTH_COMPONENT16": "number",
    "REPLACE": "number",
    "REPEAT": "number",
    "VERTEX_ATTRIB_ARRAY_ENABLED": "number",
    "FRAMEBUFFER_INCOMPLETE_DIMENSIONS": "number",
    "STENCIL_BUFFER_BIT": "number",
    "RENDERER": "number",
    "STENCIL_BACK_REF": "number",
    "TEXTURE26": "number",
    "RGB565": "number",
    "DITHER": "number",
    "CONSTANT_COLOR": "number",
    "GENERATE_MIPMAP_HINT": "number",
    "POINTS": "number",
    "DECR": "number",
    "INT_VEC3": "number",
    "TEXTURE28": "number",
    "ONE_MINUS_CONSTANT_ALPHA": "number",
    "BACK": "number",
    "RENDERBUFFER_STENCIL_SIZE": "number",
    "UNPACK_FLIP_Y_WEBGL": "number",
    "BLEND": "number",
    "TEXTURE9": "number",
    "ARRAY_BUFFER_BINDING": "number",
    "MAX_VIEWPORT_DIMS": "number",
    "INVALID_FRAMEBUFFER_OPERATION": "number",
    "TEXTURE": "number",
    "TEXTURE0": "number",
    "TEXTURE31": "number",
    "TEXTURE24": "number",
    "HIGH_INT": "number",
    "RENDERBUFFER_BINDING": "number",
    "BLEND_COLOR": "number",
    "FASTEST": "number",
    "STENCIL_WRITEMASK": "number",
    "ALIASED_POINT_SIZE_RANGE": "number",
    "TEXTURE12": "number",
    "DST_ALPHA": "number",
    "BLEND_EQUATION_RGB": "number",
    "FRAMEBUFFER_COMPLETE": "number",
    "NEAREST_MIPMAP_NEAREST": "number",
    "VERTEX_ATTRIB_ARRAY_SIZE": "number",
    "TEXTURE3": "number",
    "DEPTH_WRITEMASK": "number",
    "CONTEXT_LOST_WEBGL": "number",
    "INVALID_VALUE": "number",
    "TEXTURE_MAG_FILTER": "number",
    "ONE_MINUS_CONSTANT_COLOR": "number",
    "ONE_MINUS_SRC_ALPHA": "number",
    "TEXTURE_CUBE_MAP_POSITIVE_Z": "number",
    "NOTEQUAL": "number",
    "ALPHA": "number",
    "DEPTH_STENCIL": "number",
    "MAX_VERTEX_UNIFORM_VECTORS": "number",
    "DEPTH_COMPONENT": "number",
    "RENDERBUFFER_RED_SIZE": "number",
    "TEXTURE20": "number",
    "RED_BITS": "number",
    "RENDERBUFFER_BLUE_SIZE": "number",
    "SCISSOR_BOX": "number",
    "VENDOR": "number",
    "FRONT_AND_BACK": "number",
    "CONSTANT_ALPHA": "number",
    "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING": "number",
    "NEAREST": "number",
    "CULL_FACE": "number",
    "ALIASED_LINE_WIDTH_RANGE": "number",
    "TEXTURE19": "number",
    "FRONT": "number",
    "DEPTH_CLEAR_VALUE": "number",
    "GREEN_BITS": "number",
    "TEXTURE29": "number",
    "TEXTURE23": "number",
    "MAX_RENDERBUFFER_SIZE": "number",
    "STENCIL_ATTACHMENT": "number",
    "TEXTURE27": "number",
    "BOOL_VEC2": "number",
    "OUT_OF_MEMORY": "number",
    "MIRRORED_REPEAT": "number",
    "POLYGON_OFFSET_UNITS": "number",
    "TEXTURE_MIN_FILTER": "number",
    "STENCIL_BACK_PASS_DEPTH_PASS": "number",
    "LINE_LOOP": "number",
    "FLOAT_MAT3": "number",
    "TEXTURE14": "number",
    "LINEAR": "number",
    "RGB5_A1": "number",
    "ONE_MINUS_SRC_COLOR": "number",
    "SAMPLE_COVERAGE_INVERT": "number",
    "DONT_CARE": "number",
    "FRAMEBUFFER_BINDING": "number",
    "RENDERBUFFER_ALPHA_SIZE": "number",
    "STENCIL_REF": "number",
    "ZERO": "number",
    "DECR_WRAP": "number",
    "SAMPLE_COVERAGE": "number",
    "STENCIL_BACK_FUNC": "number",
    "TEXTURE30": "number",
    "VIEWPORT": "number",
    "STENCIL_BITS": "number",
    "FLOAT": "number",
    "COLOR_WRITEMASK": "number",
    "SAMPLE_COVERAGE_VALUE": "number",
    "TEXTURE_CUBE_MAP_NEGATIVE_Y": "number",
    "STENCIL_BACK_FAIL": "number",
    "FLOAT_MAT4": "number",
    "UNSIGNED_SHORT_4_4_4_4": "number",
    "TEXTURE6": "number",
    "RENDERBUFFER_WIDTH": "number",
    "RGBA4": "number",
    "ALWAYS": "number",
    "BLEND_EQUATION_ALPHA": "number",
    "COLOR_BUFFER_BIT": "number",
    "TEXTURE_CUBE_MAP": "number",
    "DEPTH_BUFFER_BIT": "number",
    "STENCIL_CLEAR_VALUE": "number",
    "BLEND_EQUATION": "number",
    "RENDERBUFFER_GREEN_SIZE": "number",
    "NEAREST_MIPMAP_LINEAR": "number",
    "VERTEX_ATTRIB_ARRAY_TYPE": "number",
    "INCR_WRAP": "number",
    "ONE_MINUS_DST_COLOR": "number",
    "HIGH_FLOAT": "number",
    "BYTE": "number",
    "FRONT_FACE": "number",
    "SAMPLE_ALPHA_TO_COVERAGE": "number",
    "CCW": "number",
    "TEXTURE13": "number",
    "MAX_VERTEX_ATTRIBS": "number",
    "MAX_VERTEX_TEXTURE_IMAGE_UNITS": "number",
    "TEXTURE_WRAP_T": "number",
    "UNPACK_PREMULTIPLY_ALPHA_WEBGL": "number",
    "FLOAT_VEC2": "number",
    "LUMINANCE": "number",
    "GREATER": "number",
    "INT_VEC2": "number",
    "VALIDATE_STATUS": "number",
    "FRAMEBUFFER": "number",
    "FRAMEBUFFER_UNSUPPORTED": "number",
    "TEXTURE5": "number",
    "FUNC_SUBTRACT": "number",
    "BLEND_DST_ALPHA": "number",
    "SAMPLER_CUBE": "number",
    "ONE_MINUS_DST_ALPHA": "number",
    "LESS": "number",
    "TEXTURE_CUBE_MAP_POSITIVE_X": "number",
    "BLUE_BITS": "number",
    "DEPTH_TEST": "number",
    "VERTEX_ATTRIB_ARRAY_STRIDE": "number",
    "DELETE_STATUS": "number",
    "TEXTURE18": "number",
    "POLYGON_OFFSET_FACTOR": "number",
    "UNSIGNED_INT": "number",
    "TEXTURE_2D": "number",
    "DST_COLOR": "number",
    "FLOAT_MAT2": "number",
    "COMPRESSED_TEXTURE_FORMATS": "number",
    "MAX_FRAGMENT_UNIFORM_VECTORS": "number",
    "DEPTH_STENCIL_ATTACHMENT": "number",
    "LUMINANCE_ALPHA": "number",
    "CW": "number",
    "VERTEX_ATTRIB_ARRAY_NORMALIZED": "number",
    "TEXTURE_CUBE_MAP_NEGATIVE_Z": "number",
    "LINEAR_MIPMAP_LINEAR": "number",
    "BUFFER_SIZE": "number",
    "SAMPLE_BUFFERS": "number",
    "TEXTURE15": "number",
    "ACTIVE_TEXTURE": "number",
    "VERTEX_SHADER": "number",
    "TEXTURE22": "number",
    "VERTEX_ATTRIB_ARRAY_POINTER": "number",
    "INCR": "number",
    "COMPILE_STATUS": "number",
    "MAX_COMBINED_TEXTURE_IMAGE_UNITS": "number",
    "TEXTURE7": "number",
    "UNSIGNED_SHORT_5_5_5_1": "number",
    "DEPTH_BITS": "number",
    "RGBA": "number",
    "TRIANGLE_STRIP": "number",
    "COLOR_CLEAR_VALUE": "number",
    "BROWSER_DEFAULT_WEBGL": "number",
    "INVALID_ENUM": "number",
    "SCISSOR_TEST": "number",
    "LINE_STRIP": "number",
    "FRAMEBUFFER_INCOMPLETE_ATTACHMENT": "number",
    "STENCIL_FUNC": "number",
    "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME": "number",
    "RENDERBUFFER_HEIGHT": "number",
    "TEXTURE8": "number",
    "TRIANGLES": "number",
    "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE": "number",
    "STENCIL_BACK_VALUE_MASK": "number",
    "TEXTURE25": "number",
    "RENDERBUFFER": "number",
    "LEQUAL": "number",
    "TEXTURE1": "number",
    "STENCIL_INDEX8": "number",
    "FUNC_ADD": "number",
    "STENCIL_FAIL": "number",
    "BLEND_SRC_ALPHA": "number",
    "BOOL": "number",
    "ALPHA_BITS": "number",
    "LOW_INT": "number",
    "TEXTURE10": "number",
    "SRC_COLOR": "number",
    "MAX_VARYING_VECTORS": "number",
    "BLEND_DST_RGB": "number",
    "TEXTURE_BINDING_CUBE_MAP": "number",
    "STENCIL_INDEX": "number",
    "TEXTURE_BINDING_2D": "number",
    "MEDIUM_INT": "number",
    "SHADER_TYPE": "number",
    "POLYGON_OFFSET_FILL": "number",
    "DYNAMIC_DRAW": "number",
    "TEXTURE4": "number",
    "STENCIL_BACK_PASS_DEPTH_FAIL": "number",
    "STREAM_DRAW": "number",
    "MAX_CUBE_MAP_TEXTURE_SIZE": "number",
    "TEXTURE17": "number",
    "TRIANGLE_FAN": "number",
    "UNPACK_ALIGNMENT": "number",
    "CURRENT_PROGRAM": "number",
    "LINES": "number",
    "INVALID_OPERATION": "number",
    "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT": "number",
    "LINEAR_MIPMAP_NEAREST": "number",
    "CLAMP_TO_EDGE": "number",
    "RENDERBUFFER_DEPTH_SIZE": "number",
    "TEXTURE_WRAP_S": "number",
    "ELEMENT_ARRAY_BUFFER": "number",
    "UNSIGNED_SHORT_5_6_5": "number",
    "ACTIVE_UNIFORMS": "number",
    "FLOAT_VEC3": "number",
    "NO_ERROR": "number",
    "ATTACHED_SHADERS": "number",
    "DEPTH_ATTACHMENT": "number",
    "TEXTURE11": "number",
    "STENCIL_TEST": "number",
    "ONE": "number",
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE": "number",
    "STATIC_DRAW": "number",
    "GEQUAL": "number",
    "BOOL_VEC4": "number",
    "COLOR_ATTACHMENT0": "number",
    "PACK_ALIGNMENT": "number",
    "MAX_TEXTURE_SIZE": "number",
    "STENCIL_PASS_DEPTH_FAIL": "number",
    "CULL_FACE_MODE": "number",
    "TEXTURE16": "number",
    "STENCIL_BACK_WRITEMASK": "number",
    "SRC_ALPHA": "number",
    "UNSIGNED_SHORT": "number",
    "TEXTURE21": "number",
    "FUNC_REVERSE_SUBTRACT": "number",
    "SHADING_LANGUAGE_VERSION": "number",
    "EQUAL": "number",
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL": "number",
    "BOOL_VEC3": "number",
    "SAMPLER_2D": "number",
    "TEXTURE_CUBE_MAP_NEGATIVE_X": "number",
    "MAX_TEXTURE_IMAGE_UNITS": "number",
    "TEXTURE_CUBE_MAP_POSITIVE_Y": "number",
    "RENDERBUFFER_INTERNAL_FORMAT": "number",
    "STENCIL_VALUE_MASK": "number",
    "ELEMENT_ARRAY_BUFFER_BINDING": "number",
    "ARRAY_BUFFER": "number",
    "DEPTH_RANGE": "number",
    "NICEST": "number",
    "ACTIVE_ATTRIBUTES": "number",
    "NEVER": "number",
    "FLOAT_VEC4": "number",
    "CURRENT_VERTEX_ATTRIB": "number",
    "STENCIL_PASS_DEPTH_PASS": "number",
    "INVERT": "number",
    "LINK_STATUS": "number",
    "RGB": "number",
    "INT_VEC4": "number",
    "TEXTURE2": "number",
    "UNPACK_COLORSPACE_CONVERSION_WEBGL": "number",
    "MEDIUM_FLOAT": "number",
    "SRC_ALPHA_SATURATE": "number",
    "BUFFER_USAGE": "number",
    "SHORT": "number",
    "NONE": "number",
    "UNSIGNED_BYTE": "number",
    "INT": "number",
    "SUBPIXEL_BITS": "number",
    "KEEP": "number",
    "SAMPLES": "number",
    "FRAGMENT_SHADER": "number",
    "LINE_WIDTH": "number",
    "BLEND_SRC_RGB": "number",
    "LOW_FLOAT": "number",
    "VERSION": "number",
    "prototype": "WebGLRenderingContext"
  },
  "WebGLProgram": {
    "prototype": "WebGLProgram"
  },
  "OES_standard_derivatives": {
    "FRAGMENT_SHADER_DERIVATIVE_HINT_OES": "number",
    "prototype": "OES_standard_derivatives"
  },
  "WebGLFramebuffer": {
    "prototype": "WebGLFramebuffer"
  },
  "WebGLShader": {
    "prototype": "WebGLShader"
  },
  "OES_texture_float_linear": {
    "prototype": "OES_texture_float_linear"
  },
  "WebGLObject": {
    "prototype": "WebGLObject"
  },
  "WebGLBuffer": {
    "prototype": "WebGLBuffer"
  },
  "WebGLShaderPrecisionFormat": {
    "rangeMin": "number",
    "rangeMax": "number",
    "precision": "number",
    "prototype": "WebGLShaderPrecisionFormat"
  },
  "EXT_texture_filter_anisotropic": {
    "TEXTURE_MAX_ANISOTROPY_EXT": "number",
    "MAX_TEXTURE_MAX_ANISOTROPY_EXT": "number",
    "prototype": "EXT_texture_filter_anisotropic"
  },
  "Option": {},
  "Image": {},
  "Audio": {},
  "ondragend": "fn(ev: DragEvent)",
  "onkeydown": "fn(ev: KeyboardEvent)",
  "ondragover": "fn(ev: DragEvent)",
  "onkeyup": "fn(ev: KeyboardEvent)",
  "onreset": "fn(ev: Event)",
  "onmouseup": "fn(ev: MouseEvent)",
  "ondragstart": "fn(ev: DragEvent)",
  "ondrag": "fn(ev: DragEvent)",
  "screenX": "number",
  "onmouseover": "fn(ev: MouseEvent)",
  "ondragleave": "fn(ev: DragEvent)",
  "history": "History",
  "pageXOffset": "number",
  "name": "string",
  "onafterprint": "fn(ev: Event)",
  "onpause": "fn(ev: Event)",
  "onbeforeprint": "fn(ev: Event)",
  "top": "Window",
  "onmousedown": "fn(ev: MouseEvent)",
  "onseeked": "fn(ev: Event)",
  "opener": "Window",
  "onclick": "fn(ev: MouseEvent)",
  "innerHeight": "number",
  "onwaiting": "fn(ev: Event)",
  "ononline": "fn(ev: Event)",
  "ondurationchange": "fn(ev: Event)",
  "frames": "Window",
  "onblur": "fn(ev: FocusEvent)",
  "onemptied": "fn(ev: Event)",
  "onseeking": "fn(ev: Event)",
  "oncanplay": "fn(ev: Event)",
  "outerWidth": "number",
  "onstalled": "fn(ev: Event)",
  "onmousemove": "fn(ev: MouseEvent)",
  "innerWidth": "number",
  "onoffline": "fn(ev: Event)",
  "length": "number",
  "screen": "Screen",
  "onbeforeunload": "fn(ev: BeforeUnloadEvent)",
  "onratechange": "fn(ev: Event)",
  "onstorage": "fn(ev: StorageEvent)",
  "onloadstart": "fn(ev: Event)",
  "ondragenter": "fn(ev: DragEvent)",
  "onsubmit": "fn(ev: Event)",
  "self": "Window",
  "document": "Document",
  "onprogress": "fn(ev: ProgressEvent)",
  "ondblclick": "fn(ev: MouseEvent)",
  "pageYOffset": "number",
  "oncontextmenu": "fn(ev: MouseEvent)",
  "onchange": "fn(ev: Event)",
  "onloadedmetadata": "fn(ev: Event)",
  "onplay": "fn(ev: Event)",
  "onerror": "ErrorEventHandler",
  "onplaying": "fn(ev: Event)",
  "parent": "Window",
  "location": "Location",
  "oncanplaythrough": "fn(ev: Event)",
  "onabort": "fn(ev: UIEvent)",
  "onreadystatechange": "fn(ev: Event)",
  "outerHeight": "number",
  "onkeypress": "fn(ev: KeyboardEvent)",
  "frameElement": "Element",
  "onloadeddata": "fn(ev: Event)",
  "onsuspend": "fn(ev: Event)",
  "window": "Window",
  "onfocus": "fn(ev: FocusEvent)",
  "onmessage": "fn(ev: MessageEvent)",
  "ontimeupdate": "fn(ev: Event)",
  "onresize": "fn(ev: UIEvent)",
  "onselect": "fn(ev: UIEvent)",
  "navigator": "Navigator",
  "styleMedia": "StyleMedia",
  "ondrop": "fn(ev: DragEvent)",
  "onmouseout": "fn(ev: MouseEvent)",
  "onended": "fn(ev: Event)",
  "onhashchange": "fn(ev: Event)",
  "onunload": "fn(ev: Event)",
  "onscroll": "fn(ev: UIEvent)",
  "screenY": "number",
  "onmousewheel": "fn(ev: MouseWheelEvent)",
  "onload": "fn(ev: Event)",
  "onvolumechange": "fn(ev: Event)",
  "oninput": "fn(ev: Event)",
  "performance": "Performance",
  "onmspointerdown": "fn(ev: ?)",
  "animationStartTime": "number",
  "onmsgesturedoubletap": "fn(ev: ?)",
  "onmspointerhover": "fn(ev: ?)",
  "onmsgesturehold": "fn(ev: ?)",
  "onmspointermove": "fn(ev: ?)",
  "onmsgesturechange": "fn(ev: ?)",
  "onmsgesturestart": "fn(ev: ?)",
  "onmspointercancel": "fn(ev: ?)",
  "onmsgestureend": "fn(ev: ?)",
  "onmsgesturetap": "fn(ev: ?)",
  "onmspointerout": "fn(ev: ?)",
  "msAnimationStartTime": "number",
  "applicationCache": "ApplicationCache",
  "onmsinertiastart": "fn(ev: ?)",
  "onmspointerover": "fn(ev: ?)",
  "onpopstate": "fn(ev: PopStateEvent)",
  "onmspointerup": "fn(ev: ?)",
  "onpageshow": "fn(ev: PageTransitionEvent)",
  "ondevicemotion": "fn(ev: DeviceMotionEvent)",
  "devicePixelRatio": "number",
  "msCrypto": "Crypto",
  "ondeviceorientation": "fn(ev: DeviceOrientationEvent)",
  "doNotTrack": "string",
  "onmspointerenter": "fn(ev: ?)",
  "onpagehide": "fn(ev: PageTransitionEvent)",
  "onmspointerleave": "fn(ev: ?)",
  "alert": "fn(message?: ?)",
  "scroll": "fn(x?: number, y?: number)",
  "focus": "fn()",
  "scrollTo": "fn(x?: number, y?: number)",
  "print": "fn()",
  "prompt": "fn(message?: string, _default?: string) -> string",
  "open": "fn(url?: string, target?: string, features?: string, replace?: bool) -> Window",
  "scrollBy": "fn(x?: number, y?: number)",
  "confirm": "fn(message?: string) -> bool",
  "close": "fn()",
  "postMessage": "fn(message: ?, targetOrigin: string, ports?: ?)",
  "showModalDialog": "fn(url?: string, argument?: ?, options?: ?) -> ?",
  "blur": "fn()",
  "getSelection": "fn() -> Selection",
  "getComputedStyle": "fn(elt: Element, pseudoElt?: string) -> CSSStyleDeclaration",
  "msCancelRequestAnimationFrame": "fn(handle: number)",
  "matchMedia": "fn(mediaQuery: string) -> MediaQueryList",
  "cancelAnimationFrame": "fn(handle: number)",
  "msIsStaticHTML": "fn(html: string) -> bool",
  "msMatchMedia": "fn(mediaQuery: string) -> MediaQueryList",
  "requestAnimationFrame": "fn(callback: FrameRequestCallback) -> number",
  "msRequestAnimationFrame": "fn(callback: FrameRequestCallback) -> number",
  "removeEventListener": "fn(type: string, listener: EventListener, useCapture?: bool)",
  "dispatchEvent": "fn(evt: Event) -> bool",
  "attachEvent": "fn(event: string, listener: EventListener) -> bool",
  "detachEvent": "fn(event: string, listener: EventListener)",
  "localStorage": "Storage",
  "status": "string",
  "onmouseleave": "fn(ev: MouseEvent)",
  "screenLeft": "number",
  "offscreenBuffering": "?",
  "maxConnectionsPerServer": "number",
  "onmouseenter": "fn(ev: MouseEvent)",
  "clipboardData": "DataTransfer",
  "defaultStatus": "string",
  "clientInformation": "Navigator",
  "closed": "bool",
  "onhelp": "fn(ev: Event)",
  "external": "External",
  "event": "MSEventObj",
  "onfocusout": "fn(ev: FocusEvent)",
  "screenTop": "number",
  "onfocusin": "fn(ev: FocusEvent)",
  "showModelessDialog": "fn(url?: string, argument?: ?, options?: ?) -> Window",
  "navigate": "fn(url: string)",
  "resizeBy": "fn(x?: number, y?: number)",
  "item": "fn(index: ?) -> ?",
  "resizeTo": "fn(x?: number, y?: number)",
  "createPopup": "fn(arguments?: ?) -> MSPopupWindow",
  "toStaticHTML": "fn(html: string) -> string",
  "execScript": "fn(code: string, language?: string) -> ?",
  "msWriteProfilerMark": "fn(profilerMarkName: string)",
  "moveTo": "fn(x?: number, y?: number)",
  "moveBy": "fn(x?: number, y?: number)",
  "showHelp": "fn(url: string, helpArg?: ?, features?: string)",
  "captureEvents": "fn()",
  "releaseEvents": "fn()",
  "sessionStorage": "Storage",
  "clearTimeout": "fn(handle: number)",
  "setTimeout": "fn(handler: ?, timeout?: ?, args: [?]) -> number",
  "clearInterval": "fn(handle: number)",
  "setInterval": "fn(handler: ?, timeout?: ?, args: [?]) -> number",
  "msSetImmediate": "fn(expression: ?, args: [?]) -> number",
  "clearImmediate": "fn(handle: number)",
  "msClearImmediate": "fn(handle: number)",
  "setImmediate": "fn(expression: ?, args: [?]) -> number",
  "btoa": "fn(rawString: string) -> string",
  "atob": "fn(encodedString: string) -> string",
  "msIndexedDB": "IDBFactory",
  "indexedDB": "IDBFactory",
  "console": "Console",
  "onpointerenter": "fn(ev: PointerEvent)",
  "onpointerout": "fn(ev: PointerEvent)",
  "onpointerdown": "fn(ev: PointerEvent)",
  "onpointerup": "fn(ev: PointerEvent)",
  "onpointercancel": "fn(ev: PointerEvent)",
  "onpointerover": "fn(ev: PointerEvent)",
  "onpointermove": "fn(ev: PointerEvent)",
  "onpointerleave": "fn(ev: PointerEvent)",
  "addEventListener": "fn(type: string, listener: fn(ev: MouseEvent), useCapture?: bool)",
  "!name": "dom.generated.d.ts"
}
